{
  "openapi": "3.0.0",
  "info": {
    "title": "Nomics Cryptocurrency & Bitcoin API",
    "version": "1.0.0",
    "description": "# Introduction\n\nWelcome to the Nomics Cryptocurrency & Bitcoin API. To sign up for an API key please [go here](https://p.nomics.com/cryptocurrency-bitcoin-api/).\n\n[nomics.com](https://nomics.com) is built entirely with the Nomics API. Everything\nwe've done on [nomics.com](https://nomics.com) you can do with our API. There are\nno internal API endpoints.\n\nIf you need support, reach out to use at our [forums](https://forums.nomics.com/).\n\n# General\n\n## API Server URL\n\nThe Nomics API runs at `https://api.nomics.com/v1`. All requests should be prefixed\nby the server URL.\n\n## JSON and CSV Support\n\nBy default, all endpoints serve data as JSON. However, by passing `format=csv` in the URL,\nsome endpoints will return CSV data. This can be used in Google Sheets via the `IMPORTDATA`\nfunction.\n\nCSV responses will not contain a header row, this is so that data can be easily concatenated\nfrom multiple requests. The fields will be rendered in the same order as the JSON fields. See\nthe endpoint's documentation for an example.\n\nNot all endpoints support CSV. Endpoints that support CSV will have the `format` parameter in\nthe parameters section.\n\n## Errors\n\nThe Nomics API uses standard HTTP status codes to indicate success or failure. 200\nrepresents success, 4xx represents a user error (such as a problem with your key),\nand 5xx represents a problem with our API.\n\n## Versioning\n\nWe follow Semantic Versioning. That means our API is versioned as Major.Minor.Patch.\nFor example, Version 1.2.3 has major version 1, minor version 2, and patch version 3.\n\nMajor version changes indicate that we have altered\nthe API significantly and it is no longer compatible with a previous version. Major\nversions are also used as the API URL prefix.\n\nWhen we update the major version, we will not remove the previous version without notice\nto API customers and a deprecation period to allow everyone to smoothly update to the new\nversion.\n\nMinor version changes indicate that we have added new functionality without breaking\nany existing functionality. An API client is compatible with future minor versions. Note\nthat a minor version update may add a new field to an existing API endpoint's response. Your\nAPI client must ignore fields it does not understand in order to be compatible with future\nminor versions.\n\nPatch version changes indicate we fixed a bug or security vulnerability. Patch versions\ndon't add new functionality.\n\n## Demo Application\n\nA demo application using the Nomics API, CORS, and React is available on Glitch.com. This can help\nyou get started using the Nomics API. Keep in mind it uses the demo key, which is rotated frequently.\nYou should get your own API key before deploying an app to production. Check it out:\n\n<div class=\"glitch-embed-wrap\" style=\"height: 420px; width: 100%;\">\n  <iframe src=\"https://glitch.com/embed/#!/embed/nomics-api-demo?path=README.md\" alt=\"nomics-api-demo on glitch\" style=\"height: 100%; width: 100%; border: 0;\"></iframe>\n</div>\n\n## Demo Spreadsheet\n\nHere is a demo of using the Nomics API with Google Sheets.\n\n<iframe width=\"100%\" height=\"400px\" src=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vShn2iWjvqQ0ueBa9l9g1UBYVM92OZSgZ4nmp0rWuykvHPrvyMyMeSN4r0Orj0ACEIIKdCz6cc5abCw/pubhtml?widget=true&amp;headers=false\"></iframe>\n\n### Formulas\n\n* A2: `=IMPORTDATA(\"https://api.nomics.com/v1/prices?key=your-key-here&format=csv\")`\n* Column F: `=LOOKUP(D2,A:A,B:B)` finds D2 (BTC) in column A and pulls the price from column B\n* Column G: `=E2*F2`\n* Column H: `=G2/I$2`\n* Column I: `=SUM(G:G)`\n\n# SDKs and Libraries\n\n## By Nomics\n- [Nomics JavaScript Client](https://github.com/nomics-crypto/nomics-javascript)\n\n## Community Submissions\n- [Nomics.com Swift SDK](https://forums.nomics.com/t/swift-sdk-supporting-ios-macos-tvos-and-watchos/) by Nick DiZazzo\n- [Nomics Node.js Library](https://forums.nomics.com/t/i-made-a-library-for-node-js/) by mikunimaru\n- [Nomics Python Wrapper](https://forums.nomics.com/t/python-package-for-nomics-api/119) by Taylor Facen\n- [Python Wrapper for Nomics](https://github.com/AviFelman/py-nomics) by Avi Felman\n\nWe love watching developers explore new use-cases with our API. Whether you're tinkering on a small side project or building an open-source resource, please share what you're up to in our [forums](https://forums.nomics.com/).\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->"
  },
  "servers": [
    {
      "url": "https://api.nomics.com/v1",
      "description": "API Server"
    }
  ],
  "tags": [
    {
      "name": "Candles*",
      "description": "### What are OHLCV Candles?\n\nOHLCV Candles is an abbreviation of \"Open, High, Low, Close, and Volume Candlestick Data\". Each \"Candle\"\nrepresents a point in time of an asset's price history.\n\nFor example, take the following pricing data:\n\n| Month    | High | Open | Close | Low |\n|----------|------|------|-------|-----|\n| January  | $70  | $20  | $50   | $15 |\n| February | $66  | $50  | $45   | $25 |\n| March    | $80  | $45  | $62   | $30 |\n| April    | $95  | $62  | $85   | $50 |\n| May      | $90  | $85  | $70   | $60 |\n\nA candlestick chart of this data in Google Sheets looks like this:\n\n![Candlestick Chart](https://s3.us-east-2.amazonaws.com/nomics-api-documentation/candlestick-chart.png)\n\nThe lines extending from the boxes are called \"wicks\" and they represent the high and low for that time\nperiod. The top and bottom of the boxes represent the open and close. Different visualizations of candles\nhave different ways of conveying which of the top and bottom of the boxes are the open and close. In this\ncase, with Google Sheets, candles that close higher than they open are solid colors, while candles that\nclose lower than they open are transparent.\n\n### How are Candles Built?\n\nAt Nomics, we have three methods of building candles:\n\n1. Building candles from raw, gapless trade execution data (sometimes called \"tick data\")\n2. Ingesting candles directly from exchanges, and building intermediate sizes\n3. Ingesting 24 hour tickers from exchanges, and extrapolating estimated candles\n\nThe first method, trades, is greatly preferred as it yields the most accurate and trustworthy data. The second\nmethod, candles, is also very accurate, but without the underlying trade data, it is not as transparent. The\nthird method, tickers, is the lowest quality source and should only be used as an estimate of pricing activity.\n\n### Why don't candles show up right away?\n\nYou may notice that candles don't show up immediately after they start. For example, at 12:01am, you may not see\na daily, hourly, or even a minute candle for 12:00am yet. This is because several steps need to occur in order to\nbuild a candle:\n\n1. Trades must be executed on an exchange. If there are no trades after 12:00am for a market or currency, there\nis simply no data to represent.\n2. Trades must be ingested into Nomics. We ingest data as fast as possible, but due to exchange rate limits and\nlimitations on the speed of data across the internet, there is always a delay between a trade being executed and\nwhen it arrives in the Nomics database.\n3. An Exchange Candle must be built. Once we have the trade in our database, we then aggregate all trades within\nthe candle's time range in order to build and store the candle.\n4. An Aggregate Candle must be built. After an Exchange Candle is built (which represents a single market on a\nsingle exchange) we must build an Aggregated Candle (which represents an asset across all markets and exchanges)\n\nEvery step in this pipeline takes time to compute, which means that it may be seconds, or even minutes before\na trade is fully represented by all candle types in our data set.\n\nFor more information about update frequencies, see the descriptions of our candle types below.\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Standard",
      "tags": [
        "Currencies",
        "Markets",
        "Volume",
        "Exchange Rates"
      ]
    },
    {
      "name": "Enhanced*",
      "tags": [
        "Global*",
        "Currencies*",
        "Exchanges*",
        "Markets*",
        "Candles*",
        "Trades*",
        "Orders*",
        "Predictions*"
      ]
    },
    {
      "name": "Meta",
      "tags": [
        "Usage"
      ]
    },
    {
      "name": "Other",
      "tags": [
        "Deprecated"
      ]
    }
  ],
  "paths": {
    "/currencies/ticker": {
      "get": {
        "tags": [
          "Currencies"
        ],
        "summary": "Currencies Ticker",
        "operationId": "getCurrenciesTicker",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/currencies/ticker?key=your-key-here&ids=BTC,ETH,XRP&interval=1d,30d&convert=EUR&platform-currency=ETH&per-page=100&page=1\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/currencies/ticker?key=your-key-here&ids=BTC,ETH,XRP&interval=1d,30d&convert=EUR&platform-currency=ETH&per-page=100&page=1\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/currencies/ticker?key=your-key-here&ids=BTC,ETH,XRP&interval=1d,30d&convert=EUR&platform-currency=ETH&per-page=100&page=1\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/currencies/ticker?key=your-key-here&ids=BTC,ETH,XRP&interval=1d,30d&convert=EUR&platform-currency=ETH&per-page=100&page=1\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/currencies/ticker?key=your-key-here&ids=BTC,ETH,XRP&interval=1d,30d&convert=EUR&platform-currency=ETH&per-page=100&page=1\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "Price, volume, market cap, and rank for all currencies across 1 hour, 1 day, 7 day, 30 day, 365 day, and year to date intervals. Current prices are updated every 10 seconds.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency-ids"
          },
          {
            "interval": null,
            "name": "interval",
            "in": "query",
            "description": "Comma separated time interval of the ticker(s). Default is `1d,7d,30d,365d,ytd`.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "1h",
                "1d",
                "7d",
                "30d",
                "365d",
                "ytd"
              ]
            },
            "example": "1d,30d"
          },
          {
            "quote-currency": null,
            "deprecated": true,
            "name": "quote-currency",
            "in": "query",
            "description": "Currency to quote ticker price, market cap, and volume values. Must be a valid currency from [Exchange Rates](#operation/getExchangeRates). Default is `USD`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "EUR"
          },
          {
            "convert": null,
            "name": "convert",
            "in": "query",
            "description": "Currency to quote ticker price, market cap, and volume values. May be a Fiat Currency or Cryptocurrency. Default is `USD`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "EUR"
          },
          {
            "status": null,
            "name": "status",
            "in": "query",
            "description": "Status by which to filter currencies. If not provided, all currencies are shown.\n",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "dead"
              ]
            }
          },
          {
            "filter": null,
            "name": "filter",
            "in": "query",
            "description": "Further filter the set of currencies.  The `new` filter returns currencies that have recently been priced by Nomics and `any` returns currencies regardless of their state.  The `any` filer may be used to retrieve new-but-stale currencies that are listed under `new`, but are no longer active.\n",
            "schema": {
              "type": "string",
              "enum": [
                "any",
                "new"
              ]
            }
          },
          {
            "platform-currency": null,
            "name": "platform-currency",
            "in": "query",
            "description": "Filter the results by parent platform.\n",
            "schema": {
              "type": "string"
            },
            "example": "ETH"
          },
          {
            "sort": null,
            "name": "sort",
            "in": "query",
            "description": "How to sort the returned currencies. `rank` sorts by rank\nascending and `first_priced_at` sorts by when each currency\nwas first priced by Nomics descending. Only currencies\npriced after 2020-10-08 have a `first_priced_at` value so\nall other currencies have the same weight within the sort.\n",
            "schema": {
              "type": "string",
              "enum": [
                "rank",
                "first_priced_at"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/include-transparency"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Price, volume, market cap, and rank for all currencies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "currency": {
                        "type": "string",
                        "deprecated": true,
                        "description": "Nomics ID of the currency"
                      },
                      "id": {
                        "type": "string",
                        "description": "Unique Nomics ID of the currency"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "active",
                          "inactive",
                          "dead"
                        ],
                        "description": "Current status"
                      },
                      "price": {
                        "type": "string",
                        "description": "Current price"
                      },
                      "price_date": {
                        "type": "string",
                        "description": "Date of the price"
                      },
                      "price_timestamp": {
                        "type": "string",
                        "description": "Timestamp of the price"
                      },
                      "symbol": {
                        "type": "string",
                        "description": "Display symbol of the currency (may be duplicated)"
                      },
                      "platform_currency": {
                        "type": "string",
                        "description": "Nomics ID of the parent platform currency"
                      },
                      "circulating_supply": {
                        "type": "string",
                        "description": "Current circulating supply"
                      },
                      "max_supply": {
                        "type": "string",
                        "description": "Current maximum supply"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the currency"
                      },
                      "logo_url": {
                        "type": "string",
                        "description": "URL to logo of the currency"
                      },
                      "market_cap": {
                        "type": "string",
                        "description": "Current market cap"
                      },
                      "market_cap_dominance": {
                        "type": "string",
                        "description": "Current market cap as a percentage of global market cap. Only available for `active` currencies."
                      },
                      "transparent_market_cap": {
                        "type": "string",
                        "description": "Current transparent market cap"
                      },
                      "num_exchanges": {
                        "type": "string",
                        "description": "The number of exchanges on which this asset is traded"
                      },
                      "num_pairs": {
                        "type": "string",
                        "description": "Number of currency pairs (markets) this asset is a part of, where both assets are known"
                      },
                      "num_pairs_unmapped": {
                        "type": "string",
                        "description": "Number of currency pairs (markets) this asset is a part of, but where the other asset is unknown"
                      },
                      "first_candle": {
                        "type": "string",
                        "description": "RFC3999 timestamp of the first `1d` candle available via the Nomics API"
                      },
                      "first_trade": {
                        "type": "string",
                        "description": "RFC3999 timestamp of the first trade available via the Nomics API"
                      },
                      "first_order_book": {
                        "type": "string",
                        "description": "RFC3999 timestamp of the first order book snapshot available via the Nomics API"
                      },
                      "first_priced_at": {
                        "type": "string",
                        "description": "RFC3999 timestamp representing the currency was first priced by Nomics"
                      },
                      "rank": {
                        "type": "string",
                        "description": "Rank of the currency by market cap"
                      },
                      "rank_delta": {
                        "type": "string",
                        "description": "Relative rank change based on the first specified `interval` other than `1h`.  This field is only present on `active` currencies."
                      },
                      "high": {
                        "type": "string",
                        "description": "All time high price"
                      },
                      "high_timestamp": {
                        "type": "string",
                        "description": "RFC3999 timestamp of the all time high"
                      },
                      "interval": {
                        "type": "object",
                        "description": "Interval-specific ticker attributes. The key will be the name of the interval (IE: `1d` or `365d`) and will occur for every requested interval.",
                        "properties": {
                          "price_change": {
                            "type": "string",
                            "description": "Amount of price change for the given interval in USD"
                          },
                          "price_change_pct": {
                            "type": "string",
                            "description": "Percent change of price for the given interval"
                          },
                          "volume": {
                            "type": "string",
                            "description": "Total volume for the given interval in USD"
                          },
                          "volume_change": {
                            "type": "string",
                            "description": "Amount of volume change for the given interval in USD"
                          },
                          "volume_change_pct": {
                            "type": "string",
                            "description": "Percent change of volume for the given interval"
                          },
                          "market_cap_change": {
                            "type": "string",
                            "description": "Amount of market cap change for the given interval in USD"
                          },
                          "market_cap_change_pct": {
                            "type": "string",
                            "description": "Percent change of market cap for the given interval"
                          },
                          "transparent_market_cap_change": {
                            "type": "string",
                            "description": "Amount of transparent market cap change for the given interval in USD"
                          },
                          "transparent_market_cap_change_pct": {
                            "type": "string",
                            "description": "Percent change of transparent market cap for the given interval"
                          },
                          "volume_transparency": {
                            "type": "array",
                            "description": "An array of `volume`, `volume_change` and `volume_change_pct` by exchange grade"
                          },
                          "volume_transparency_grade\"": {
                            "type": "string",
                            "description": "The quartile grade assigned to this currency"
                          }
                        }
                      }
                    },
                    "example": {
                      "currency": "BTC",
                      "id": "BTC",
                      "status": "active",
                      "price": "8451.36516421",
                      "price_date": "2019-06-14T00:00:00Z",
                      "price_timestamp": "2019-06-14T12:35:00Z",
                      "symbol": "BTC",
                      "circulating_supply": "17758462",
                      "max_supply": "21000000",
                      "name": "Bitcoin",
                      "logo_url": "https://s3.us-east-2.amazonaws.com/nomics-api/static/images/currencies/btc.svg",
                      "market_cap": "150083247116.70",
                      "market_cap_dominance": "0.4080",
                      "transparent_market_cap": "150003247116.70",
                      "num_exchanges": "357",
                      "num_pairs": "42118",
                      "num_pairs_unmapped": "4591",
                      "first_candle": "2011-08-18T00:00:00Z",
                      "first_trade": "2011-08-18T00:00:00Z",
                      "first_order_book": "2017-01-06T00:00:00Z",
                      "first_priced_at": "2017-08-18T18:22:19Z",
                      "rank": "1",
                      "rank_delta": "0",
                      "high": "19404.81116899",
                      "high_timestamp": "2017-12-16",
                      "1d": {
                        "price_change": "269.75208019",
                        "price_change_pct": "0.03297053",
                        "volume": "1110989572.04",
                        "volume_change": "-24130098.49",
                        "volume_change_pct": "-0.02",
                        "market_cap_change": "4805518049.63",
                        "market_cap_change_pct": "0.03",
                        "transparent_market_cap_change": "4800518049.00",
                        "transparent_market_cap_change_pct": "0.0430",
                        "volume_transparency": [
                          {
                            "grade": "A",
                            "volume": "2144455081.37",
                            "volume_change": "-235524941.08",
                            "volume_change_pct": "-0.10"
                          },
                          {
                            "grade": "B",
                            "volume": "15856762.85",
                            "volume_change": "-6854329.88",
                            "volume_change_pct": "-0.30"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/currencies": {
      "get": {
        "tags": [
          "Currencies"
        ],
        "summary": "Currencies Metadata",
        "operationId": "getCurrencies",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/currencies?key=your-key-here&ids=BTC,ETH,XRP&attributes=id,name,logo_url\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/currencies?key=your-key-here&ids=BTC,ETH,XRP&attributes=id,name,logo_url\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/currencies?key=your-key-here&ids=BTC,ETH,XRP&attributes=id,name,logo_url\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/currencies?key=your-key-here&ids=BTC,ETH,XRP&attributes=id,name,logo_url\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/currencies?key=your-key-here&ids=BTC,ETH,XRP&attributes=id,name,logo_url\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "The currencies endpoint returns all the currencies and their metadata that Nomics supports.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency-ids"
          },
          {
            "$ref": "#/components/parameters/currency-attributes"
          },
          {
            "$ref": "#/components/parameters/format"
          },
          {
            "name": "platform-currency",
            "in": "query",
            "description": "Filter the results by parent platform.\n",
            "schema": {
              "type": "string"
            },
            "example": "ETH"
          },
          {
            "name": "platform-contract",
            "in": "query",
            "description": "Filter the results by platform contract address.\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Nomics Currencies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Nomics Currency ID"
                      },
                      "original_symbol": {
                        "type": "string",
                        "description": "Display ticker symbol, not unique"
                      },
                      "name": {
                        "type": "string",
                        "description": "Currency Name"
                      },
                      "description": {
                        "type": "string",
                        "description": "Currency description"
                      },
                      "website_url": {
                        "type": "string",
                        "description": "Currency website URL"
                      },
                      "logo_url": {
                        "type": "string",
                        "description": "Currency logo URL"
                      },
                      "blog_url": {
                        "type": "string",
                        "description": "Currency blog URL"
                      },
                      "discord_url": {
                        "type": "string",
                        "description": "Currency Discord URL"
                      },
                      "facebook_url": {
                        "type": "string",
                        "description": "Currency Facebook URL"
                      },
                      "github_url": {
                        "type": "string",
                        "description": "Currency GitHub URL"
                      },
                      "medium_url": {
                        "type": "string",
                        "description": "Currency Medium URL"
                      },
                      "reddit_url": {
                        "type": "string",
                        "description": "Currency Reddit URL"
                      },
                      "telegram_url": {
                        "type": "string",
                        "description": "Currency Telegram URL"
                      },
                      "twitter_url": {
                        "type": "string",
                        "description": "Currency Twitter URL"
                      },
                      "whitepaper_url": {
                        "type": "string",
                        "description": "Currency white paper URL"
                      },
                      "youtube_url": {
                        "type": "string",
                        "description": "Currency YouTube URL"
                      },
                      "linkedin_url": {
                        "type": "string",
                        "description": "Currency LinkedIn URL"
                      },
                      "bitcointalk_url": {
                        "type": "string",
                        "description": "Currency BitcoinTalk URL"
                      },
                      "block_explorer_url": {
                        "type": "string",
                        "description": "Currency Block Explorer URL"
                      },
                      "replaced_by": {
                        "type": "string",
                        "description": "Nomics Currency ID of the currency that replaced the given currency. This can happen on hard forks or blockchain swaps as an example."
                      },
                      "cryptocontrol_coin_id": {
                        "type": "string",
                        "description": "Coin ID for CryptoControl.io"
                      },
                      "platform_currency_id": {
                        "type": "string",
                        "description": "Parent BlockChain, if any"
                      },
                      "platform_contract_address": {
                        "type": "string",
                        "description": "Platform contract address, if any"
                      },
                      "used_for_pricing": {
                        "type": "boolean",
                        "description": "Whether or not Nomics uses this currency to price other currencies"
                      }
                    },
                    "example": {
                      "id": "BTC",
                      "original_symbol": "BTC",
                      "name": "Bitcoin",
                      "description": "Bitcoin cryptocurrency",
                      "website_url": "https://bitcoin.org/en",
                      "logo_url": "https://s3.us-east-2.amazonaws.com/nomics-api/static/images/currencies/btc.svg",
                      "blog_url": "https://bitcoin.org/en/blog",
                      "discord_url": "https://discord.gg/bitcoin",
                      "facebook_url": "https://www.facebook.com/bitcoin",
                      "github_url": "https://github.com/bitcoin",
                      "medium_url": "https://medium.com/bitcoin",
                      "reddit_url": "https://www.reddit.com/r/bitcoin",
                      "telegram_url": "https://t.me/bitcoin",
                      "twitter_url": "https://twitter.com/bitcoin",
                      "whitepaper_url": "https://bitcoin.org/en/bitcoin-paper",
                      "youtube_url": "https://www.youtube.com/channel/bitcoin",
                      "linkedin_url": "",
                      "block_explorer_url": "",
                      "bitcointalk_url": "",
                      "replaced_by": null,
                      "cryptocontrol_coin_id": "bitcoin",
                      "used_for_pricing": true
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "BTC"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/currencies/highlights": {
      "get": {
        "tags": [
          "Currencies*"
        ],
        "summary": "Currency Highlights",
        "operationId": "getCurrencyHighlights",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/currencies/highlights?key=your-key-here&currency=BTC\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/currencies/highlights?key=your-key-here&currency=BTC\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/currencies/highlights?key=your-key-here&currency=BTC\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/currencies/highlights?key=your-key-here&currency=BTC\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/currencies/highlights?key=your-key-here&currency=BTC\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "The currency highlights endpoint returns various aggregate\nstatistics for a currency over some interval.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/convert"
          },
          {
            "$ref": "#/components/parameters/single-interval"
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_volume": {
                      "type": "string",
                      "example": "44992515443.99",
                      "description": "Total volume over the selected interval."
                    },
                    "fiat_volume": {
                      "type": "string",
                      "example": "11260653854.63",
                      "description": "Total fiat volume over the selected interval."
                    },
                    "fiat_volume_change": {
                      "type": "string",
                      "example": "-1729134612.39",
                      "description": "Fiat volume change over the interval."
                    },
                    "fiat_volume_change_pct": {
                      "type": "string",
                      "example": "-0.1331",
                      "description": "Fiat volume change over the interval as a percentage."
                    },
                    "num_exchanges": {
                      "type": "string",
                      "example": "234",
                      "description": "Total exchanges with volume over the selected interval."
                    },
                    "top_currencies": {
                      "description": "Top 5 currencies paired with the selected currency by volume over the interval.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "currency": {
                            "type": "string",
                            "example": "USDT"
                          },
                          "name": {
                            "type": "string",
                            "example": "Tether"
                          },
                          "volume": {
                            "type": "string",
                            "example": "19977518229.94"
                          },
                          "volume_change": {
                            "type": "string",
                            "example": "-1701126882.23"
                          },
                          "volume_change_pct": {
                            "type": "string",
                            "example": "-0.0785"
                          }
                        }
                      }
                    },
                    "top_fiat_currencies": {
                      "description": "Top 5 fiat currencies paired with the selected currency by volume over the interval.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "currency": {
                            "type": "string",
                            "example": "USD"
                          },
                          "name": {
                            "type": "string",
                            "example": "United States Dollar"
                          },
                          "volume": {
                            "type": "string",
                            "example": "8949685546.44"
                          },
                          "volume_change": {
                            "type": "string",
                            "example": "-1649839584.88"
                          },
                          "volume_change_pct": {
                            "type": "string",
                            "example": "-0.1557"
                          }
                        }
                      }
                    },
                    "top_exchanges": {
                      "description": "Top 5 exchanges by volume for the selected currency over the interval.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "exchange": {
                            "type": "string",
                            "example": "binance"
                          },
                          "volume": {
                            "type": "string",
                            "example": "5035804498.42"
                          },
                          "volume_change": {
                            "type": "string",
                            "example": "-805394804.84"
                          },
                          "volume_change_pct": {
                            "type": "string",
                            "example": "-0.1379"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/currencies/sparkline": {
      "get": {
        "deprecated": true,
        "tags": [
          "Deprecated"
        ],
        "summary": "Currencies Sparkline",
        "operationId": "getCurrenciesSparkline",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/currencies/sparkline?key=your-key-here&ids=BTC,ETH,XRP&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/currencies/sparkline?key=your-key-here&ids=BTC,ETH,XRP&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/currencies/sparkline?key=your-key-here&ids=BTC,ETH,XRP&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/currencies/sparkline?key=your-key-here&ids=BTC,ETH,XRP&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/currencies/sparkline?key=your-key-here&ids=BTC,ETH,XRP&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "The currencies sparkline endpoint returns prices for all currencies within a customizable time interval\nsuitable for sparkline charts.\n\n**Note** the timestamps and prices are built off of OHLCV candles using the close price. This means that the timestamp\nrepresents the start of the candle, and the price is the close price of that candle. This means the response's final timestamp\nand price value are always as current as possible, but also that the price is effectively \"off\" by one candle. This endpoint\nis designed to serve as a convenient way to render sparklines, if you need exactly aligned times and prices you can use the\n[Aggregated OHLCV Candles endpoint](#operation/getCandles).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency-ids"
          },
          {
            "$ref": "#/components/parameters/interval-start"
          },
          {
            "$ref": "#/components/parameters/interval-end"
          },
          {
            "$ref": "#/components/parameters/convert"
          }
        ],
        "responses": {
          "200": {
            "description": "Currency performance over time for all currencies over the requested time period.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "currency": {
                        "type": "string",
                        "description": "Currency ID",
                        "example": "BTC"
                      },
                      "timestamps": {
                        "type": "array",
                        "description": "Time values matching the price value of the same index",
                        "items": {
                          "type": "string",
                          "description": "Timestamp of the start of the candle in RFC3339",
                          "example": "2018-04-03T16:00:00Z"
                        }
                      },
                      "prices": {
                        "type": "array",
                        "description": "Price in USD corresponding to timestamp value of the same index",
                        "items": {
                          "type": "string",
                          "description": "Price in USD",
                          "example": "7436.82313"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/global-ticker": {
      "get": {
        "tags": [
          "Global*"
        ],
        "summary": "Global Ticker",
        "operationId": "getGlobalTicker",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/global-ticker?key=your-key-here\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/global-ticker?key=your-key-here\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/global-ticker?key=your-key-here\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/global-ticker?key=your-key-here\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/global-ticker?key=your-key-here\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.\n\nGlobally-aggregated market cap and volume data over various\nintervals across all currencies.\n\nThe total `volume` fields are computed by summing the\n`spot_volume` and `derivative_volume` fields at each interval.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/convert"
          }
        ],
        "responses": {
          "200": {
            "description": "The global ticker",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "num_currencies": {
                      "type": "string",
                      "description": "The total number of currencies",
                      "example": "12801"
                    },
                    "num_currencies_active": {
                      "type": "string",
                      "description": "The total number of active currencies",
                      "example": "5277"
                    },
                    "num_currencies_inative": {
                      "type": "string",
                      "description": "The total number of inactive currencies",
                      "example": "6337"
                    },
                    "num_currencies_dead": {
                      "type": "string",
                      "description": "The total number of dead currencies",
                      "example": "1187"
                    },
                    "num_currencies_new": {
                      "type": "string",
                      "description": "The total number of new currencies",
                      "example": "312"
                    },
                    "market_cap": {
                      "type": "string",
                      "description": "Current global market cap",
                      "example": "1799044056712"
                    },
                    "transparent_market_cap": {
                      "type": "string",
                      "description": "Current global transparent market cap",
                      "example": "1759092897670"
                    },
                    "1d": {
                      "$ref": "#/components/schemas/GlobalTickerInterval"
                    },
                    "7d": {
                      "$ref": "#/components/schemas/GlobalTickerInterval"
                    },
                    "30d": {
                      "$ref": "#/components/schemas/GlobalTickerInterval"
                    },
                    "365d": {
                      "$ref": "#/components/schemas/GlobalTickerInterval"
                    },
                    "ytd": {
                      "$ref": "#/components/schemas/GlobalTickerInterval"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/supplies/history": {
      "get": {
        "tags": [
          "Currencies*"
        ],
        "summary": "Supply History",
        "operationId": "getSupplyHistory",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/supplies/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/supplies/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/supplies/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/supplies/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/supplies/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.\n\nSupply history per currency for every day in a time range.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/interval-start"
          },
          {
            "$ref": "#/components/parameters/interval-end"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "Daily supply history for a currency.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "string",
                        "description": "RFC3999 timestamp"
                      },
                      "available": {
                        "type": "string",
                        "description": "available supply at `timestamp`"
                      },
                      "max": {
                        "type": "string",
                        "description": "max supply at `timestamp`"
                      }
                    },
                    "example": {
                      "timestamp": "2018-05-14T00:04:31Z",
                      "available": "17052037.0",
                      "max": "21000000.0"
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "05/14/2018 00:04:31,17052037.0,21000000.0"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/supplies/interval": {
      "get": {
        "deprecated": true,
        "tags": [
          "Deprecated"
        ],
        "summary": "Supplies Interval",
        "operationId": "getSuppliesInterval",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/supplies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/supplies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/supplies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/supplies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/supplies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.\n\nOpen and close supply information for all currencies between a customizable time interval.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/interval-start"
          },
          {
            "$ref": "#/components/parameters/interval-end"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "Open and close supply information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "currency": {
                        "type": "string",
                        "description": "Nomics ID of the currency"
                      },
                      "open_available": {
                        "type": "string",
                        "description": "Open available supply"
                      },
                      "open_max": {
                        "type": "string",
                        "description": "Open max supply"
                      },
                      "open_timestamp": {
                        "type": "string",
                        "description": "RFC3999 timestamp of the open supply information"
                      },
                      "close_available": {
                        "type": "string",
                        "description": "Close available supply"
                      },
                      "close_max": {
                        "type": "string",
                        "description": "Close max supply"
                      },
                      "close_timestamp": {
                        "type": "string",
                        "description": "RFC3999 timestamp of the close supply information"
                      }
                    },
                    "example": {
                      "currency": "BTC",
                      "open_available": "17032187.0",
                      "open_max": "21000000.0",
                      "open_timestamp": "2018-05-14T00:04:31Z",
                      "close_available": "17052037.0",
                      "close_max": "21000000.0",
                      "close_timestamp": "2018-05-24T14:19:34Z"
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "BTC,17032187.0,21000000.0,05/14/2018 00:04:31,17052037.0,21000000.0,05/24/2018 14:19:34"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/exchanges/highlights": {
      "get": {
        "tags": [
          "Exchanges*"
        ],
        "summary": "Exchange Highlights",
        "operationId": "getExchangeHighlights",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/exchanges/highlights?key=your-key-here&exchange=binance\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/exchanges/highlights?key=your-key-here&exchange=binance\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/exchanges/highlights?key=your-key-here&exchange=binance\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/exchanges/highlights?key=your-key-here&exchange=binance\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/exchanges/highlights?key=your-key-here&exchange=binance\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "The exchange highlights endpoint returns various aggregate\nstatistics for an exchange over some interval.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/exchange"
          },
          {
            "$ref": "#/components/parameters/convert"
          },
          {
            "$ref": "#/components/parameters/single-interval"
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_volume": {
                      "type": "string",
                      "example": "57747416191.11",
                      "description": "Total volume over the selected interval."
                    },
                    "num_trades": {
                      "type": "string",
                      "example": "62947560",
                      "description": "Total number of trades over the interval."
                    },
                    "num_markets": {
                      "type": "string",
                      "example": "1315",
                      "description": "Total number of markets with volume over the interval."
                    },
                    "num_crypto_markets": {
                      "type": "string",
                      "example": "1174",
                      "description": "Total number of markets where both sides are crypto currencies with volume over the interval."
                    },
                    "num_fiat_markets": {
                      "type": "string",
                      "example": "141",
                      "description": "Total number of markets where one of the sides is a fiat currency with volume over the interval."
                    },
                    "num_crypto_currencies": {
                      "type": "string",
                      "example": "374",
                      "description": "Total number of distinct crypto currencies with volume over the interval."
                    },
                    "num_fiat_currencies": {
                      "type": "string",
                      "example": "8",
                      "description": "Total number of distinct fiat currencies with volume over the interval."
                    },
                    "top_quote_dominance": {
                      "description": "Top 5 quote currencies by volume dominance over the interval.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "symbol": {
                            "type": "string",
                            "example": "USDT"
                          },
                          "name": {
                            "type": "string",
                            "example": "Tether"
                          },
                          "dominance_pct": {
                            "type": "string",
                            "example": "0.8765"
                          }
                        }
                      }
                    },
                    "top_crypto_quote_dominance": {
                      "description": "Top 5 crypto quote currencies by volume dominance over the interval.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "symbol": {
                            "type": "string",
                            "example": "USDT"
                          },
                          "name": {
                            "type": "string",
                            "example": "Tether"
                          },
                          "dominance_pct": {
                            "type": "string",
                            "example": "0.8928"
                          }
                        }
                      }
                    },
                    "top_fiat_quote_dominance": {
                      "description": "Top 5 fiat quote currencies by volume dominance over the interval.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "symbol": {
                            "type": "string",
                            "example": "TRY"
                          },
                          "name": {
                            "type": "string",
                            "example": "Turkish Lira"
                          },
                          "dominance_pct": {
                            "type": "string",
                            "example": "0.4875"
                          }
                        }
                      }
                    },
                    "top_markets": {
                      "description": "Top 5 markets by volume over the interval.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "market": {
                            "type": "string",
                            "example": "fu_ETHUSDT"
                          },
                          "base": {
                            "type": "string",
                            "example": "ETH"
                          },
                          "base_name": {
                            "type": "string",
                            "example": "Ethereum"
                          },
                          "quote": {
                            "type": "string",
                            "example": "USDT"
                          },
                          "quote_name": {
                            "type": "string",
                            "example": "Tether"
                          },
                          "volume": {
                            "type": "string",
                            "example": "8115553209.27"
                          },
                          "volume_change": {
                            "type": "string",
                            "example": "-2578550465.99"
                          },
                          "volume_change_pct": {
                            "type": "string",
                            "example": "-0.2411"
                          }
                        }
                      }
                    },
                    "top_volume_gainers": {
                      "description": "Top 5 markets by volume over the interval sorted by largest volume gain first.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "market": {
                            "type": "string",
                            "example": "fu_ADAUSDT"
                          },
                          "base": {
                            "type": "string",
                            "example": "ADA"
                          },
                          "base_name": {
                            "type": "string",
                            "example": "Cardano"
                          },
                          "quote": {
                            "type": "string",
                            "example": "USDT"
                          },
                          "quote_name": {
                            "type": "string",
                            "example": "Tether"
                          },
                          "volume": {
                            "type": "string",
                            "example": "2531122210.64"
                          },
                          "volume_change": {
                            "type": "string",
                            "example": "481773365.76"
                          },
                          "volume_change_pct": {
                            "type": "string",
                            "example": "0.2351"
                          }
                        }
                      }
                    },
                    "top_volume_deltas": {
                      "description": "Top 5 markets by volume over the interval sorted by largest volume percent change first.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "market": {
                            "type": "string",
                            "example": "DOCKBUSD"
                          },
                          "base": {
                            "type": "string",
                            "example": "DOCK"
                          },
                          "base_name": {
                            "type": "string",
                            "example": "Dock"
                          },
                          "quote": {
                            "type": "string",
                            "example": "BUSC"
                          },
                          "quote_name": {
                            "type": "string",
                            "example": "Binance USD"
                          },
                          "volume": {
                            "type": "string",
                            "example": "3422853.34"
                          },
                          "volume_change": {
                            "type": "string",
                            "example": "3181019.02"
                          },
                          "volume_change_pct": {
                            "type": "string",
                            "example": "13.1537"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/exchanges/ticker": {
      "get": {
        "tags": [
          "Exchanges*"
        ],
        "summary": "Exchanges Ticker",
        "operationId": "getExchangesTicker",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/exchanges/ticker?key=your-key-here&ids=binance,gdax&interval=1d,30d&convert=EUR&per-page=100&page=1\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/exchanges/ticker?key=your-key-here&ids=binance,gdax&interval=1d,30d&convert=EUR&per-page=100&page=1\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/exchanges/ticker?key=your-key-here&ids=binance,gdax&interval=1d,30d&convert=EUR&per-page=100&page=1\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/exchanges/ticker?key=your-key-here&ids=binance,gdax&interval=1d,30d&convert=EUR&per-page=100&page=1\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/exchanges/ticker?key=your-key-here&ids=binance,gdax&interval=1d,30d&convert=EUR&per-page=100&page=1\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "The Exchanges Ticker provides high level information about the exchanges integrated with Nomics.\nIt provides a limited amount of metadata, the type of integration, the time range of available data, pairs,\nand interval information about the volume and, where applicable, the number of trades.\n",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Comma separated list of Nomics Exchange IDs to filter result rows",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "binance,gdax"
          },
          {
            "interval": null,
            "name": "interval",
            "in": "query",
            "description": "Comma separated time interval of the ticker(s). Default is `1d`.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "1h",
                "1d",
                "7d",
                "30d",
                "365d",
                "ytd"
              ]
            },
            "example": "1d,30d"
          },
          {
            "convert": null,
            "name": "convert",
            "in": "query",
            "description": "Currency to quote ticker price, market cap, and volume values. May be a Fiat Currency or Cryptocurrency. Default is `USD`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "EUR"
          },
          {
            "status": null,
            "name": "status",
            "in": "query",
            "description": "Status by which to filter exchanges.  If not provided, all exchanges are shown.\n",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive"
              ]
            }
          },
          {
            "type": null,
            "name": "type",
            "in": "query",
            "description": "Type by which to filter exchanges.  If not provided, all exchanges are shown.\n",
            "schema": {
              "type": "string",
              "enum": [
                "spot",
                "derivative"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/exchange-centralized"
          },
          {
            "$ref": "#/components/parameters/exchange-decentralized"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "sort": null,
            "name": "sort",
            "in": "query",
            "description": "Controls how the result set is sorted.  By default\n(`volume`), exchanges are sorted by descending USD volume\nover the first requested interval.  When sorting by\n`weight`, the exchanges are sorted according to how much\nimpact each exchange has on the prices of its assets over\nthe first requested interval.\n",
            "schema": {
              "type": "string",
              "enum": [
                "volume",
                "weight"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata and interval data for exchanges",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Nomics ID of the exchange"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the exchange"
                      },
                      "logo_url": {
                        "type": "string",
                        "description": "URL to logo of the exchange"
                      },
                      "rank": {
                        "type": "string",
                        "description": "Rank of the exchange relative to other exchanges after the `status` and `type` filters are applied"
                      },
                      "weight": {
                        "type": "string",
                        "description": "A measure of the relative impact the exchange has on the prices of its assets"
                      },
                      "transparency_grade": {
                        "type": "string",
                        "description": "Transparency grade of the exchange"
                      },
                      "coverage_type": {
                        "type": "string",
                        "description": "Coverage type of the exchange (trades, candles, tickers)"
                      },
                      "order_books": {
                        "type": "boolean",
                        "description": "Indicates if order books are available"
                      },
                      "first_trade": {
                        "type": "string",
                        "description": "Date of the first trade available"
                      },
                      "first_candle": {
                        "type": "string",
                        "description": "Date of the first candle available"
                      },
                      "first_order_book": {
                        "type": "string",
                        "description": "Date of the first order book available"
                      },
                      "last_updated": {
                        "type": "string",
                        "description": "Timestamp of the last update of data"
                      },
                      "fiat_currencies": {
                        "type": "array",
                        "description": "List of fiat currencies available"
                      },
                      "num_pairs": {
                        "type": "string",
                        "description": "Number of currency pairs (markets) available"
                      },
                      "num_pairs_unmapped": {
                        "type": "string",
                        "description": "Number of currency pairs (markets) that we know about, but are not yet available"
                      },
                      "centralized": {
                        "type": "boolean",
                        "description": "Whether or not the exchange is centralized"
                      },
                      "decentralized": {
                        "type": "boolean",
                        "description": "Whether or not the exchange is decentralized"
                      },
                      "interval": {
                        "type": "object",
                        "description": "Interval-specific ticker attributes. The key will be the name of the interval\n(IE: `1d` or `365d`) and will occur for every requested interval.\n",
                        "properties": {
                          "volume": {
                            "type": "string",
                            "description": "Total volume for the given interval in USD"
                          },
                          "volume_change": {
                            "type": "string",
                            "description": "Amount of volume change for the given interval in USD"
                          },
                          "volume_change_pct": {
                            "type": "string",
                            "description": "Percent change of volume for the given interval"
                          },
                          "spot_volume": {
                            "type": "string",
                            "description": "Total spot market volume for the given interval in USD"
                          },
                          "spot_volume_change": {
                            "type": "string",
                            "description": "Amount of spot market volume change for the given interval in USD"
                          },
                          "spot_volume_change_pct": {
                            "type": "string",
                            "description": "Percent change of spot market volume for the given interval"
                          },
                          "derivative_volume": {
                            "type": "string",
                            "description": "Total derivative market volume for the given interval in USD"
                          },
                          "derivative_volume_change": {
                            "type": "string",
                            "description": "Amount of derivative market volume change for the given interval in USD"
                          },
                          "derivative_volume_change_pct": {
                            "type": "string",
                            "description": "Percent change of derivative market volume for the given interval"
                          },
                          "trades": {
                            "type": "string",
                            "description": "Total trades for the given interval in USD"
                          },
                          "trades_change": {
                            "type": "string",
                            "description": "Amount of trades change for the given interval in USD"
                          },
                          "trades_change_pct": {
                            "type": "string",
                            "description": "Percent change of trades for the given interval"
                          }
                        }
                      }
                    },
                    "example": {
                      "id": "binance",
                      "name": "Binance",
                      "logo_url": "https://s3.us-east-2.amazonaws.com/nomics-api/static/images/exchanges/binance.svg",
                      "transparency_grade": "A",
                      "coverage_type": "trades",
                      "order_books": true,
                      "first_trade": "2017-07-13T00:00:00Z",
                      "first_candle": "2017-07-13T00:00:00Z",
                      "first_order_book": "2018-08-29T00:00:00Z",
                      "num_pairs": "1380",
                      "num_pairs_unmapped": "4",
                      "last_updated": "2021-02-09T17:41:49.274Z",
                      "fiat_currencies": [
                        "AUD",
                        "BRL",
                        "EUR",
                        "GBP",
                        "NGN",
                        "RUB",
                        "TRY",
                        "UAH",
                        "ZAR"
                      ],
                      "rank": "1",
                      "weight": "1.0000",
                      "centralized": true,
                      "decentralized": false,
                      "1d": {
                        "volume": "69502395456.05",
                        "volume_change": "8271350165.81",
                        "volume_change_pct": "0.1351",
                        "trades": "57026206",
                        "trades_change": "2164610",
                        "trades_change_pct": "0.0395",
                        "spot_volume": "30692230668.60",
                        "spot_volume_change": "3690855752.34",
                        "spot_volume_change_pct": "0.1367",
                        "derivative_volume": "38810164787.45",
                        "derivative_volume_change": "4580494413.47",
                        "derivative_volume_change_pct": "0.1338"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/exchanges/volume/history": {
      "get": {
        "tags": [
          "Exchanges*"
        ],
        "summary": "Exchanges Volume History",
        "operationId": "getExchangeVolumeHistory",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/exchanges/volume/history?key=your-key-here&exchange=binance&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/exchanges/volume/history?key=your-key-here&exchange=binance&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/exchanges/volume/history?key=your-key-here&exchange=binance&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/exchanges/volume/history?key=your-key-here&exchange=binance&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/exchanges/volume/history?key=your-key-here&exchange=binance&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "Exchange Volume History is the total volume for all\ncryptoassets of an exchange in USD at intervals between the\nrequested time period.  For each entry, the `volume` field\nrepresents the sum of the `spot_volume` and\n`derivative_volume` fields.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/exchange"
          },
          {
            "$ref": "#/components/parameters/interval-start"
          },
          {
            "$ref": "#/components/parameters/interval-end"
          },
          {
            "$ref": "#/components/parameters/convert"
          },
          {
            "$ref": "#/components/parameters/format"
          },
          {
            "$ref": "#/components/parameters/include-transparency"
          }
        ],
        "responses": {
          "200": {
            "description": "Volume over time for all currencies of an exchange",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "string",
                        "description": "RFC3339 timestamp",
                        "example": "2020-04-14T00:00:00Z"
                      },
                      "volume": {
                        "type": "string",
                        "description": "Total volume (spot volume + derivative volume) in the target currency (`USD` by default)",
                        "example": "3747500000"
                      },
                      "spot_volume": {
                        "type": "string",
                        "description": "Total spot market volume in the target currency (`USD` by default)",
                        "example": "1197368698"
                      },
                      "derivative_volume": {
                        "type": "string",
                        "description": "Total derivative market volume in the target currency (`USD` by default)",
                        "example": "2550131302"
                      },
                      "transparent_volume": {
                        "type": "string",
                        "description": "Total transparent volume in the target currency (`USD` by default)",
                        "example": "3747500000"
                      },
                      "transparent_spot_volume": {
                        "type": "string",
                        "description": "Total transparent spot market volume in the target currency (`USD` by default)",
                        "example": "1197368698"
                      },
                      "transparent_derivative_volume": {
                        "type": "string",
                        "description": "Total transparent derivative market volume in the target currency (`USD` by default)",
                        "example": "2550131302"
                      }
                    }
                  }
                }
              },
              "test/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "04/14/2018 00:00:00,5209035491"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/exchanges": {
      "get": {
        "tags": [
          "Exchanges*"
        ],
        "summary": "Exchanges Metadata",
        "operationId": "getExchanges",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/exchanges?key=your-key-here&ids=binance,idex,bittrex&attributes=id,name,transparency_grade\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/exchanges?key=your-key-here&ids=binance,idex,bittrex&attributes=id,name,transparency_grade\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/exchanges?key=your-key-here&ids=binance,idex,bittrex&attributes=id,name,transparency_grade\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/exchanges?key=your-key-here&ids=binance,idex,bittrex&attributes=id,name,transparency_grade\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/exchanges?key=your-key-here&ids=binance,idex,bittrex&attributes=id,name,transparency_grade\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "The exchanges endpoint returns all the exchanges and their metadata that Nomics supports.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/exchange-ids"
          },
          {
            "$ref": "#/components/parameters/exchange-attributes"
          },
          {
            "$ref": "#/components/parameters/exchange-centralized"
          },
          {
            "$ref": "#/components/parameters/exchange-decentralized"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Nomics Exchanges",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Nomics Exchange ID"
                      },
                      "capability_markets": {
                        "type": "boolean",
                        "description": "Flag that determines if the exchange provides markets data"
                      },
                      "capability_trades": {
                        "type": "boolean",
                        "description": "Flag that determines if the exchange provides trades data"
                      },
                      "capability_trades_by_timestamp": {
                        "type": "boolean",
                        "description": "Flag that determines if the exchange provides trades by timestamp data"
                      },
                      "capability_trades_snapshot": {
                        "type": "boolean",
                        "description": "Flag that determines if the exchange provides recent-only trades data"
                      },
                      "capability_orders_snapshot": {
                        "type": "boolean",
                        "description": "Flag that determines if the exchange provides orderbook snapshot data"
                      },
                      "capability_candles": {
                        "type": "boolean",
                        "description": "Flag that determines if the exchange provides OHLCV candle data"
                      },
                      "capability_ticker": {
                        "type": "boolean",
                        "description": "Flag that determines if the exchange provides 24h ticker data"
                      },
                      "integrated": {
                        "type": "boolean",
                        "description": "Flag that determines if the exchange has completed a [Nomics Deep Data Integration](https://nomicsintegration.com)"
                      },
                      "name": {
                        "type": "string",
                        "description": "Exchange Name"
                      },
                      "description": {
                        "type": "string",
                        "description": "Exchange description"
                      },
                      "location": {
                        "type": "string",
                        "description": "Primary exchange location country"
                      },
                      "logo_url": {
                        "type": "string",
                        "description": "Exchange logo URL"
                      },
                      "website_url": {
                        "type": "string",
                        "description": "Exchange website URL"
                      },
                      "fees_url": {
                        "type": "string",
                        "description": "Exchange fees URL"
                      },
                      "twitter_url": {
                        "type": "string",
                        "description": "Exchange Twitter URL"
                      },
                      "facebook_url": {
                        "type": "string",
                        "description": "Exchange Facebook URL"
                      },
                      "reddit_url": {
                        "type": "string",
                        "description": "Exchange Reddit URL"
                      },
                      "chat_url": {
                        "type": "string",
                        "description": "Exchange chat URL"
                      },
                      "blog_url": {
                        "type": "string",
                        "description": "Exchange blog URL"
                      },
                      "year": {
                        "type": "string",
                        "description": "Year exchange became active"
                      },
                      "transparency_grade": {
                        "type": "string",
                        "description": "The [Nomics Transparency Rating](https://blog.nomics.com/essays/transparency-ratings/) for the exchange"
                      },
                      "order_books_interval": {
                        "type": "number",
                        "description": "The maximum frequency (in milliseconds) at which order book snapshots are taken for this exchange"
                      },
                      "centralized": {
                        "type": "boolean",
                        "description": "Whether or not the exchange is centralized"
                      },
                      "decentralized": {
                        "type": "boolean",
                        "description": "Whether or not the exchange is decentralized"
                      },
                      "replaced_by": {
                        "type": "string",
                        "description": "The id of the exchange that replaces this exchange, if applicable"
                      }
                    },
                    "example": {
                      "id": "binance",
                      "capability_markets\"": true,
                      "capability_trades\"": true,
                      "capability_trades_by_timestamp\"": false,
                      "capability_trades_snapshot\"": false,
                      "capability_orders_snapshot\"": true,
                      "capability_candles\"": false,
                      "capability_ticker\"": false,
                      "integrated\"": false,
                      "name": "Binance",
                      "description": "The company was created under the tutelage of Changpeng 'CZ' Zhao and his co-founder Yi He.",
                      "location": "Malta",
                      "logo_url": "https://s3.us-east-2.amazonaws.com/nomics-api/static/images/exchanges/binance.svg",
                      "website_url": "https://www.binance.com/",
                      "fees_url": "https://www.binance.com/en/fee/schedule",
                      "twitter_url": "https://twitter.com/binance",
                      "facebook_url": "https://www.facebook.com/binance",
                      "reddit_url": "https://www.reddit.com/r/binance/",
                      "chat_url": "https://t.me/binanceexchange",
                      "blog_url": "https://www.binance.com/en/blog",
                      "year": 2017,
                      "transparency_grade": "A",
                      "order_books_interval": 60000,
                      "centralized": true,
                      "decentralized": false
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "Binance"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/markets": {
      "get": {
        "tags": [
          "Markets"
        ],
        "summary": "Markets",
        "operationId": "getMarkets",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/markets?key=your-key-here&exchange=binance&base=BTC,ETH,LTC,XMR&quote=BTC,ETH,BNB\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/markets?key=your-key-here&exchange=binance&base=BTC,ETH,LTC,XMR&quote=BTC,ETH,BNB\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/markets?key=your-key-here&exchange=binance&base=BTC,ETH,LTC,XMR&quote=BTC,ETH,BNB\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/markets?key=your-key-here&exchange=binance&base=BTC,ETH,LTC,XMR&quote=BTC,ETH,BNB\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/markets?key=your-key-here&exchange=binance&base=BTC,ETH,LTC,XMR&quote=BTC,ETH,BNB\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "The markets endpoint returns information on the exchanges and markets that Nomics supports,\nin addition to the Nomics currency identifiers for the base and quote currency.\n",
        "parameters": [
          {
            "name": "exchange",
            "in": "query",
            "description": "Nomics Exchange ID to filter by",
            "schema": {
              "type": "string"
            },
            "example": "binance"
          },
          {
            "name": "base",
            "in": "query",
            "description": "Comma separated list of base currencies to filter by",
            "schema": {
              "type": "string"
            },
            "example": "BTC,ETH,LTC,XMR"
          },
          {
            "name": "quote",
            "in": "query",
            "description": "Comma separated list of quote currencies to filter by",
            "schema": {
              "type": "string"
            },
            "example": "BTC,ETH,BNB"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of markets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "exchange": {
                        "type": "string",
                        "description": "Nomics Exchange ID"
                      },
                      "market": {
                        "type": "string",
                        "description": "The Exchange's Market ID (usable on Exchange's API)"
                      },
                      "base": {
                        "type": "string",
                        "description": "Nomics Currency ID of the asset being traded"
                      },
                      "quote": {
                        "type": "string",
                        "description": "Nomics Currency ID of the asset used to quote a price"
                      }
                    },
                    "example": {
                      "exchange": "binance",
                      "market": "XMRBTC",
                      "base": "XMR",
                      "quote": "BTC"
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "bitfinex,avtbtc,AVT,BTC"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/exchange-markets/highlights": {
      "get": {
        "tags": [
          "Markets*"
        ],
        "summary": "Market Highlights",
        "operationId": "getMarketHighlights",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/exchange-markets/highlights?key=your-key-here\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/exchange-markets/highlights?key=your-key-here\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/exchange-markets/highlights?key=your-key-here\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/exchange-markets/highlights?key=your-key-here\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/exchange-markets/highlights?key=your-key-here\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "The market highlights endpoint returns various aggregate\nstatistics for a pair over some interval.\n",
        "parameters": [
          {
            "name": "base",
            "in": "query",
            "required": true,
            "description": "A Nomics Currency ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quote",
            "in": "query",
            "required": true,
            "description": "A Nomics Currency ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/convert"
          },
          {
            "$ref": "#/components/parameters/single-interval"
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_volume": {
                      "type": "string",
                      "example": "20483770618.66",
                      "description": "Total volume over the selected interval."
                    },
                    "num_exchanges": {
                      "type": "string",
                      "example": "149",
                      "description": "Total exchanges with volume for the pair over the selected interval."
                    },
                    "num_trades": {
                      "type": "string",
                      "example": "1662675",
                      "description": "Total trades over the selected interval for the pair."
                    },
                    "top_exchanges": {
                      "description": "Top 5 exchanges by volume over the interval for the selected pair.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "exchange": {
                            "type": "string",
                            "example": "binance"
                          },
                          "num_trades": {
                            "type": "string",
                            "example": "1110546"
                          },
                          "volume": {
                            "type": "string",
                            "example": "2301132067.70"
                          },
                          "volume_change": {
                            "type": "string",
                            "example": "-361183040.87"
                          },
                          "volume_change_pct": {
                            "type": "string",
                            "example": "-0.1357"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/exchange-markets/ticker": {
      "get": {
        "tags": [
          "Markets*"
        ],
        "summary": "Exchange Markets Ticker",
        "operationId": "getExchangeMarketsTicker",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/exchange-markets/ticker?key=your-key-here&interval=1d,30d&currency=BTC,ETH&exchange=binance,gdax&convert=BTC&per-page=100&page=1\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/exchange-markets/ticker?key=your-key-here&interval=1d,30d&currency=BTC,ETH&exchange=binance,gdax&convert=BTC&per-page=100&page=1\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/exchange-markets/ticker?key=your-key-here&interval=1d,30d&currency=BTC,ETH&exchange=binance,gdax&convert=BTC&per-page=100&page=1\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/exchange-markets/ticker?key=your-key-here&interval=1d,30d&currency=BTC,ETH&exchange=binance,gdax&convert=BTC&per-page=100&page=1\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/exchange-markets/ticker?key=your-key-here&interval=1d,30d&currency=BTC,ETH&exchange=binance,gdax&convert=BTC&per-page=100&page=1\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.\n\nThe Exchange Markets Ticker provides high level information about individual markets on exchanges integrated\nwith Nomics. It provides metadata, the type of market, aggregation information, current financial data, and\nfinancial data over preset intervals.\n",
        "parameters": [
          {
            "name": "interval",
            "in": "query",
            "description": "Comma separated time interval of the ticker(s).",
            "required": false,
            "default": "1d",
            "schema": {
              "type": "string",
              "enum": [
                "1h",
                "1d",
                "7d",
                "30d",
                "365d",
                "ytd"
              ]
            },
            "example": "1d,30d"
          },
          {
            "name": "currency",
            "in": "query",
            "description": "A comma separated list of Nomics Currency IDs. A market must have one of the currencies as either its base or quote currency to be included.",
            "schema": {
              "type": "string"
            },
            "example": "BTC,ETH"
          },
          {
            "name": "base",
            "in": "query",
            "description": "A comma separated list of Nomics Currency IDs. A market must have one of the currencies as its base currency to be included.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quote",
            "in": "query",
            "description": "A comma separated list of Nomics Currency IDs. A market must have one of the currencies as its quote currency to be included.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "description": "A comma separated list of Nomics Exchange IDs. A market must be on one of the exchanges to be included.",
            "schema": {
              "type": "string"
            },
            "example": "binance,gdax"
          },
          {
            "name": "market",
            "in": "query",
            "description": "A comma separated list of Nomics Market IDs. A market's `market_id` must be one of the provided markets to be included.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "convert",
            "in": "query",
            "description": "Nomics Currency ID to convert all financial data to",
            "default": "USD",
            "schema": {
              "type": "string"
            },
            "example": "BTC"
          },
          {
            "status": null,
            "name": "status",
            "in": "query",
            "description": "Status by which to filter markets. All markets are shown\nby default, regardless of status.\n\n* `active` includes all the mapped markets that have had\n  activity within the past 24 hours.\n\n* `inactive` includes all the mapped markets that have had\n  activity within the past year, but not the past 24\n  hours.\n\n* `dead` includes all the mapped markets that have had no\n  activity in the past year.\n\n* `mapped` includes all the markets whose base and quote\n  currency are known.\n\n* `unmapped` includes all the markets whose base and quote\n  currency are unknown.\n",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "dead",
                "mapped",
                "unmapped"
              ]
            }
          },
          {
            "search": null,
            "name": "search",
            "in": "query",
            "description": "Search string by which to filter markets.  Items match the\nsearch query if it's a substring of their exchange id,\nmarket id, base currency symbol or quote currency symbol.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "sort": null,
            "name": "sort",
            "in": "query",
            "description": "Controls how the result set is sorted.  By default\n(`volume`), markets are sorted by descending USD volume\nover the first requested interval.  When sorting by\n`weight`, they are sorted according to how much impact\neach market has on its assets.\n",
            "schema": {
              "type": "string",
              "enum": [
                "volume",
                "weight"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata and interval data for individual markets on exchanges",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "exchange": {
                        "type": "string",
                        "description": "Nomics Exchange ID"
                      },
                      "market": {
                        "type": "string",
                        "description": "Nomics Market ID"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "spot",
                          "derivative",
                          "index",
                          "test"
                        ],
                        "description": "Market Type"
                      },
                      "subtype": {
                        "type": "string",
                        "enum": [
                          "funding",
                          "future",
                          "leverage",
                          "option",
                          "perpetual"
                        ],
                        "description": "Market Subtype"
                      },
                      "aggregated": {
                        "type": "boolean",
                        "description": "Indicates if the market is used to price the base and quote currencies. See [Nomics Pricing Methodology](https://blog.nomics.com/newsletter/nomics-pricing-methodology-explained/) for more information."
                      },
                      "price_exclude": {
                        "type": "boolean",
                        "description": "Indicates if the market has been excluded from pricing the base and quote currencies."
                      },
                      "volume_exclude": {
                        "type": "boolean",
                        "description": "Indicates if the market has been excluded from counting towards volume for base and quote currencies."
                      },
                      "base": {
                        "type": "string",
                        "description": "Nomics Currency ID of the base of the market"
                      },
                      "quote": {
                        "type": "string",
                        "description": "Nomics Currency ID of the quote of the market"
                      },
                      "base_symbol": {
                        "type": "string",
                        "description": "Nomics display symbol of the base of the market"
                      },
                      "quote_symbol": {
                        "type": "string",
                        "description": "Nomics display symbol of the quote of the market"
                      },
                      "price": {
                        "type": "string",
                        "description": "Latest price of the market in USD"
                      },
                      "price_quote": {
                        "type": "string",
                        "description": "Latest price of the market in the quote currency"
                      },
                      "volume_usd": {
                        "type": "string",
                        "description": "Market volume in USD based on the first `interval` (or `1d` if none specified)"
                      },
                      "last_updated": {
                        "type": "string",
                        "description": "Timestamp of when the market was last updated"
                      },
                      "status": {
                        "type": "string",
                        "description": "The status of the market",
                        "enum": [
                          "active",
                          "inactive",
                          "dead",
                          "unmapped"
                        ]
                      },
                      "weight": {
                        "type": "string",
                        "description": "How much the market contributes to pricing its assets, as a percentage of the total impact across all similar markets"
                      },
                      "first_trade": {
                        "type": "string",
                        "description": "Date of the first trade available, if applicable"
                      },
                      "first_candle": {
                        "type": "string",
                        "description": "Date of the first candle available, if applicable"
                      },
                      "first_order_book": {
                        "type": "string",
                        "description": "Date of the first order book available, if applicable"
                      },
                      "total_trades": {
                        "type": "string",
                        "description": "Total trades, if applicable"
                      },
                      "interval": {
                        "type": "object",
                        "description": "Interval-specific ticker attributes. The key will be the name of the interval\n(IE: `1d` or `365d`) and will occur for every requested interval.\n",
                        "properties": {
                          "volume": {
                            "type": "string",
                            "description": "Volume in USD"
                          },
                          "volume_base": {
                            "type": "string",
                            "description": "Volume in the base currency"
                          },
                          "volume_change": {
                            "type": "string",
                            "description": "Change of the volume in USD"
                          },
                          "volume_base_change": {
                            "type": "string",
                            "description": "Change of the volume in the base currency"
                          },
                          "trades": {
                            "type": "string",
                            "description": "Number of trades"
                          },
                          "trades_change": {
                            "type": "string",
                            "description": "Change in the number of trades"
                          },
                          "price_change": {
                            "type": "string",
                            "description": "Change in the price in USD"
                          },
                          "price_quote_change": {
                            "type": "string",
                            "description": "Change in the price in the quote currency"
                          }
                        }
                      }
                    },
                    "example": {
                      "exchange": "binance",
                      "market": "BTCUSDT",
                      "type": "spot",
                      "aggregated": false,
                      "price_exclude": false,
                      "volume_exclude": false,
                      "base": "BTC",
                      "quote": "USDT",
                      "base_symbol": "BTC",
                      "quote_symbol": "USDT",
                      "price": "7252.08623165",
                      "price_quote": "7231.48000000",
                      "volume_usd": "455152159.26",
                      "last_updated": "2019-11-22T18:57:00Z",
                      "status": "active",
                      "weight": "0.2316",
                      "first_trade": "2017-08-17T00:00:00Z",
                      "first_candle": "2017-08-17T00:00:00Z",
                      "first_order_book": "2018-08-29T00:00:00Z",
                      "total_trades": "813006943",
                      "1d": {
                        "volume": "811359239.06",
                        "volume_base": "111495.36",
                        "volume_base_change": "-56699.74",
                        "volume_change": "367840228.36",
                        "trades": "693395",
                        "trades_change": "-381033",
                        "price_change": "-343.64505167",
                        "price_quote_change": "0.00000000"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/markets/prices": {
      "get": {
        "deprecated": true,
        "tags": [
          "Deprecated"
        ],
        "summary": "Market Prices",
        "operationId": "getMarketPrices",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/markets/prices?key=your-key-here&currency=BTC\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/markets/prices?key=your-key-here&currency=BTC\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/markets/prices?key=your-key-here&currency=BTC\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/markets/prices?key=your-key-here&currency=BTC\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/markets/prices?key=your-key-here&currency=BTC\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.\n\nThe market prices endpoint returns prices in USD for the last trade in each market with the given base\ncurrency. These prices only include markets with quote currencies that are used as part of our\n[Pricing Methodology](https://blog.nomics.com/nomics-newsletter/nomics-pricing-methodology-explained/)\n(fiat, BTC, and ETH) to convert to USD.\n",
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "description": "Nomics Currency ID of the desired base currency",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "BTC"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of markets with their price",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "exchange": {
                        "type": "string",
                        "description": "Nomics ID of the exchange"
                      },
                      "quote": {
                        "type": "string",
                        "description": "Nomics ID of the quote currency"
                      },
                      "price": {
                        "type": "string",
                        "description": "Price in USD of the most recent trade"
                      },
                      "timestamp": {
                        "type": "string",
                        "description": "RFC3339 Timestamp of the most recent trade"
                      }
                    },
                    "example": {
                      "exchange": "bitfinex",
                      "quote": "USD",
                      "price": "7419.69255",
                      "timestamp": "2018-06-05T13:23:18.345Z"
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "bitfinex,USD,7419.69255,06/05/2018 13:23:18"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/markets/interval": {
      "get": {
        "deprecated": true,
        "tags": [
          "Deprecated"
        ],
        "summary": "Market Interval",
        "operationId": "getMarketInterval",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.\n\nThe market interval endpoint returns a summary of information about all markets based in a given currency over\na configurable time interval.\n",
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "description": "Nomics Currency ID to query information for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "BTC"
          },
          {
            "name": "hours",
            "in": "query",
            "description": "Number of hours back to calculate data",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 8760,
              "default": 1
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start time of the interval in RFC3339 (URI escaped).  If not provided, it is computed using the\nhours parameter.\n",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "2018-04-14T00%3A00%3A00Z"
          },
          {
            "$ref": "#/components/parameters/interval-end"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of markets with price and volume information for a currency",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketInterval"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "bitfinex,EUR,5107055.26765,9484.34395,05/03/2018 15:00:00,9671.60953,05/03/2018 20:31:24"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/exchange-markets/prices": {
      "get": {
        "deprecated": true,
        "tags": [
          "Deprecated"
        ],
        "summary": "Exchange Market Prices",
        "operationId": "getExchangeMarketPrices",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/exchange-markets/prices?key=your-key-here&currency=BTC&exchange=binance\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/exchange-markets/prices?key=your-key-here&currency=BTC&exchange=binance\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/exchange-markets/prices?key=your-key-here&currency=BTC&exchange=binance\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/exchange-markets/prices?key=your-key-here&currency=BTC&exchange=binance\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/exchange-markets/prices?key=your-key-here&currency=BTC&exchange=binance\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.\n\nThe exchange market prices endpoint returns prices for the last trade in each market\n",
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "description": "Nomics Currency ID to filter by. If present, only markets with this currency as the base or quote will be returned.",
            "schema": {
              "type": "string"
            },
            "example": "BTC"
          },
          {
            "name": "exchange",
            "in": "query",
            "description": "Nomics Exchange ID to filter by. If present, only markets on this exchange will be returned",
            "schema": {
              "type": "string"
            },
            "example": "binance"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of markets with their prices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "exchange": {
                        "type": "string",
                        "description": "Nomics ID of the exchange"
                      },
                      "base": {
                        "type": "string",
                        "description": "Nomics ID of the base currency"
                      },
                      "quote": {
                        "type": "string",
                        "description": "Nomics ID of the quote currency"
                      },
                      "price_quote": {
                        "type": "string",
                        "description": "Price in the quote currency of the most recent trade"
                      },
                      "timestamp": {
                        "type": "string",
                        "description": "RFC3339 Timestamp of the most recent trade"
                      }
                    },
                    "example": {
                      "exchange": "binance",
                      "base": "ADA",
                      "quote": "BTC",
                      "price_quote": "0.00002183",
                      "timestamp": "2018-06-25T15:13:21.304Z"
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "binance,ADA,BTC,0.00002181,06/25/2018 15:17:06"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/exchange-markets/interval": {
      "get": {
        "deprecated": true,
        "tags": [
          "Deprecated"
        ],
        "summary": "Exchange Market Interval",
        "operationId": "getExchangeMarketInterval",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/exchange-markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/exchange-markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/exchange-markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/exchange-markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/exchange-markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.\n\nThe exchange market interval endpoint returns a summary of information about all markets over a configurable\ntime interval in their native values.\n",
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "description": "Nomics Currency ID to filter by. If present, only markets with this currency as the base or quote will be returned.",
            "schema": {
              "type": "string"
            },
            "example": "BTC"
          },
          {
            "name": "exchange",
            "in": "query",
            "description": "Nomics Exchange ID to filter by. If present, only markets on this exchange will be returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start time of the interval in RFC3339 (URI escaped).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "2018-04-14T00%3A00%3A00Z"
          },
          {
            "$ref": "#/components/parameters/interval-end"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of markets with price and volume information for a currency",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "exchange": {
                        "type": "string",
                        "description": "Nomics Exchange ID"
                      },
                      "base": {
                        "type": "string",
                        "description": "Nomics Currency ID of the asset being traded"
                      },
                      "quote": {
                        "type": "string",
                        "description": "Nomics Currency ID of the asset used to quote a price"
                      },
                      "volume_base": {
                        "type": "string",
                        "description": "Total volume in the base currency"
                      },
                      "volume_usd": {
                        "type": "string",
                        "description": "Total volume in USD"
                      },
                      "open_quote": {
                        "type": "string",
                        "description": "Open price in the quote currency"
                      },
                      "open_timestamp": {
                        "type": "string",
                        "description": "Timestamp of the open price in RFC 3339"
                      },
                      "close_quote": {
                        "type": "string",
                        "description": "Close price in the quote currency"
                      },
                      "close_timestamp": {
                        "type": "string",
                        "description": "Timestamp of the close price in RFC 3339"
                      },
                      "num_trades": {
                        "type": "string",
                        "description": "Total number of trades"
                      }
                    },
                    "example": {
                      "exchange": "binance",
                      "base": "ADA",
                      "quote": "BTC",
                      "volume_base": "4974200617.00000",
                      "volume_usd": "1496075991.61416",
                      "open_quote": "0.00002547",
                      "open_timestamp": "2018-04-14T00:00:00Z",
                      "close_quote": "0.00003071",
                      "close_timestamp": "2018-05-14T00:00:00Z",
                      "num_trades": "2456653"
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "binance,ADA,BTC,4974200617.00000,1496075991.61416,0.00002547,04/14/2018 00:00:00,0.00003071,05/14/2018 00:00:00,2456653"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/market-cap/history": {
      "get": {
        "tags": [
          "Markets"
        ],
        "summary": "Market Cap History",
        "operationId": "getMarketCapHistory",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/market-cap/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/market-cap/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/market-cap/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/market-cap/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/market-cap/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "MarketCap History is the total market cap for all cryptoassets at intervals between the requested time period.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/interval-start"
          },
          {
            "$ref": "#/components/parameters/interval-end"
          },
          {
            "$ref": "#/components/parameters/convert"
          },
          {
            "$ref": "#/components/parameters/format"
          },
          {
            "$ref": "#/components/parameters/include-transparency"
          }
        ],
        "responses": {
          "200": {
            "description": "Performance over time for the entire market.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "string",
                        "description": "RFC3339 timestamp",
                        "example": "2018-07-05T15:00:00Z"
                      },
                      "market_cap": {
                        "type": "string",
                        "description": "Total market cap in the target currency (`USD` by default)",
                        "example": "269222501959"
                      },
                      "transparent_market_cap": {
                        "type": "string",
                        "description": "Total transparent market cap in the target currency (`USD` by default)",
                        "example": "270122591259"
                      }
                    }
                  }
                }
              },
              "test/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "07/05/2018 15:00:00,269222501959"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/candles": {
      "get": {
        "tags": [
          "Candles*"
        ],
        "summary": "Aggregated OHLCV Candles",
        "operationId": "getCandles",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/candles?key=your-key-here&interval=1d&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/candles?key=your-key-here&interval=1d&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/candles?key=your-key-here&interval=1d&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/candles?key=your-key-here&interval=1d&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/candles?key=your-key-here&interval=1d&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.\n\nThe candles endpoint returns aggregated open, high, low, close, and volume information for Nomics currencies.\nWhen asking for candles, a currency is provided as a parameter. Nomics aggregates all markets where the given\ncurrency is the base currency and the quote currency is a fiat currency, BTC, or ETH and returns all values in\nUSD.\n\nCandles are aggregated across all markets for the base currencies, which necessitates converting to a common\nquote currency. Nomics converts all markets into USD in order to aggregated candles.\n\nCandles have the following time range limits based on interval and time:\n\n* `1d`: Available from inception with no range limit\n* `1h`: Available from inception. Time range limits:\n  * Past 30 days: accessible in a single request\n  * Older than 30 days: 1 day at a time\n\nCSV format is: `timestamp,open,high,low,close,volume,empty,transparent_open,transparent_high,transparent_low,transparent_close,transparent_volume`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/candle-interval"
          },
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "interval-start": null,
            "name": "start",
            "in": "query",
            "description": "Start time of the interval in RFC3339 (URI escaped). If\nnot provided, starts from the first candle for daily\ncandles and from the current time minus 30 days for hourly\ncandles.\n",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "2018-04-14T00%3A00%3A00Z"
          },
          {
            "interval-end": null,
            "name": "end",
            "in": "query",
            "description": "End time of the interval in RFC3339 (URI escaped). If not\nprovided, the current time is used except for when hourly\ncandles with a `start` time older than 30 days are\nrequested.  In that case, the `end` time defaults to the\n`start` time plus 1 day.\n",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "2018-05-14T00%3A00%3A00Z"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of candles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "string",
                        "description": "Start time of the candle in RFC3339"
                      },
                      "open": {
                        "type": "string",
                        "description": "First trade price in USD"
                      },
                      "high": {
                        "type": "string",
                        "description": "Highest price in USD"
                      },
                      "low": {
                        "type": "string",
                        "description": "Lowest price in USD"
                      },
                      "close": {
                        "type": "string",
                        "description": "Last trade price in USD"
                      },
                      "volume": {
                        "type": "string",
                        "description": "Volume in USD"
                      },
                      "transparent_open": {
                        "type": "string",
                        "description": "First transparent trade price in USD"
                      },
                      "transparent_high": {
                        "type": "string",
                        "description": "Highest transparent price in USD"
                      },
                      "transparent_low": {
                        "type": "string",
                        "description": "Lowest transparent price in USD"
                      },
                      "transparent_close": {
                        "type": "string",
                        "description": "Last transparent trade price in USD"
                      },
                      "transparent_volume": {
                        "type": "string",
                        "description": "Transparent volume in USD"
                      },
                      "volume_transparency": {
                        "type": "object",
                        "properties": {
                          "?": {
                            "type": "string"
                          },
                          "A": {
                            "type": "string"
                          },
                          "B": {
                            "type": "string"
                          },
                          "C": {
                            "type": "string"
                          },
                          "D": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "example": {
                      "timestamp": "2020-03-30T15:00:00Z",
                      "open": "6362.19740968",
                      "high": "6440.12784982",
                      "low": "6362.13190948",
                      "close": "6372.30963698",
                      "volume": "2063249447",
                      "transparent_open": "6361.48718894",
                      "transparent_high": "6479.69105111",
                      "transparent_low": "6351.20910437",
                      "transparent_close": "6372.80226823",
                      "transparent_volume": "192668445",
                      "volume_transparency": {
                        "?": "141033501",
                        "A": "192668444",
                        "B": "1881706",
                        "C": "1324902748",
                        "D": "402763045"
                      }
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "2018-03-19T10:00:00Z,7024.32225,8276.19407,8281.17307,8566.43000,59624801"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/volume/history": {
      "get": {
        "tags": [
          "Volume"
        ],
        "summary": "Global Volume History",
        "operationId": "getVolumeHistory",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/volume/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z&convert=EUR\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/volume/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z&convert=EUR\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/volume/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z&convert=EUR\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/volume/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z&convert=EUR\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/volume/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z&convert=EUR\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "Volume History is the total volume for all cryptoassets in USD\nat intervals between the requested time period.  For each\nentry, the `volume` field represents the sum of the\n`spot_volume` and `derivative_volume` fields.\n",
        "parameters": [
          {
            "start": null,
            "name": "start",
            "in": "query",
            "description": "Start time of the interval in RFC3339 (URI escaped)",
            "schema": {
              "type": "string"
            },
            "example": "2018-04-14T00%3A00%3A00Z"
          },
          {
            "end": null,
            "name": "end",
            "in": "query",
            "description": "End time of the interval in RFC3339 (URI escaped). If not provided,\nthe current time is used.\n",
            "schema": {
              "type": "string"
            },
            "example": "2018-05-14T00%3A00%3A00Z"
          },
          {
            "convert": null,
            "name": "convert",
            "in": "query",
            "description": "Currency to quote volume values. May be a Fiat Currency or Cryptocurrency. Default is `USD`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "EUR"
          },
          {
            "$ref": "#/components/parameters/format"
          },
          {
            "$ref": "#/components/parameters/include-transparency"
          }
        ],
        "responses": {
          "200": {
            "description": "Volume over time for all currencies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "string",
                        "description": "RFC3339 timestamp",
                        "example": "2018-04-14T00:00:00Z"
                      },
                      "volume": {
                        "type": "string",
                        "description": "Total volume (spot volume + derivative volume) in the target currency (`USD` by default)",
                        "example": "10177952765"
                      },
                      "spot_volume": {
                        "type": "string",
                        "description": "Total spot market volume in the target currency (`USD` by default)",
                        "example": "7706914494"
                      },
                      "derivative_volume": {
                        "type": "string",
                        "description": "Total derivative market volume in the target currency (`USD` by default)",
                        "example": "2471038271"
                      },
                      "transparent_volume": {
                        "type": "string",
                        "description": "Total transparent volume in the target currency (`USD` by default)",
                        "example": "6608950947"
                      },
                      "transparent_spot_volume": {
                        "type": "string",
                        "description": "Total transparent spot market volume in the target currency (`USD` by default)",
                        "example": "4137912676"
                      },
                      "transparent_derivative_volume": {
                        "type": "string",
                        "description": "Total transparent derivative market volume in the target currency (`USD` by default)",
                        "example": "2471038271"
                      }
                    }
                  }
                }
              },
              "test/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "04/14/2018 00:00:00,5209035491"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/exchange-rates": {
      "get": {
        "tags": [
          "Exchange Rates"
        ],
        "summary": "Exchange Rates",
        "operationId": "getExchangeRates",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/exchange-rates?key=your-key-here\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/exchange-rates?key=your-key-here\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/exchange-rates?key=your-key-here\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/exchange-rates?key=your-key-here\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/exchange-rates?key=your-key-here\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "The exchange rates endpoint returns the current exchange rates used by Nomics to convert prices from markets\ninto USD. This contains Fiat currencies as well as a BTC and ETH quote prices. This endpoint helps normalize\ndata across markets as well as to provide localization for users.\n\nCurrently, this endpoint does not support historical data, but this feature is planned.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "List of exchange rates into USD",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExchangeRate"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "AUD,0.76953,2018-04-04T00:00:00Z"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/exchange-rates/history": {
      "get": {
        "tags": [
          "Exchange Rates"
        ],
        "summary": "Exchange Rates History",
        "operationId": "getExchangeRatesHistory",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/exchange-rates/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/exchange-rates/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/exchange-rates/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/exchange-rates/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/exchange-rates/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "Exchange rates for every point in a time range. This endpoint can be used with other history endpoints\nto convert values into a desired quote currency.\n\nThe currency parameter must be a Nomics Quote Currency, to get all Nomics Quote Currencies, use the\n`/exchange-rates` endpoint for all current rates.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/currency"
          },
          {
            "$ref": "#/components/parameters/interval-start"
          },
          {
            "$ref": "#/components/parameters/interval-end"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "Exchange rates for every point in a time range",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "string",
                        "description": "RFC3999 timestamp of the rate"
                      },
                      "rate": {
                        "type": "string",
                        "description": "Rate of exchange to USD"
                      }
                    },
                    "example": {
                      "timestamp": "2018-05-01T00:00:00Z",
                      "rate": "1.2079045272261680"
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "05/01/2018 00:00:00,1.2079045272261680"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/trades": {
      "get": {
        "tags": [
          "Trades*"
        ],
        "summary": "Trades",
        "operationId": "getTrades",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/trades?key=your-key-here&exchange=binance&market=BTCUSDT&limit=100&order=asc&from=1970-01-01T00%3A00%3A00Z\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/trades?key=your-key-here&exchange=binance&market=BTCUSDT&limit=100&order=asc&from=1970-01-01T00%3A00%3A00Z\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/trades?key=your-key-here&exchange=binance&market=BTCUSDT&limit=100&order=asc&from=1970-01-01T00%3A00%3A00Z\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/trades?key=your-key-here&exchange=binance&market=BTCUSDT&limit=100&order=asc&from=1970-01-01T00%3A00%3A00Z\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/trades?key=your-key-here&exchange=binance&market=BTCUSDT&limit=100&order=asc&from=1970-01-01T00%3A00%3A00Z\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.\n\nThe trades endpoint returns individual trades in a normalized format for an individual\nexchange market.\n\n### Getting the most recent trades\n\nBy default, the trades endpoint returns the 100 most recent trades in descending order.\nYou only need to provide the required parameters.\n\n### Sequential ingestion\n\nIf you want to page through trades sequentially for ingestion, follow these steps:\n\n1. Get the first page of trades `order=asc`\n2. Get the timestamp of the last trade in the page, let's call it `last`\n3. Get the next page of trades `order=asc&from=<last>`\n4. Repeat 2 and 3\n\nTo reverse chronologically ingest, make a request for the most recent trades, and\nproceed as above but with `order=desc`.\n\n### Building your own candles\n\nIf you want to build your own candles, follow the steps for sequential ingestion, but start\nwith `from=<start>` in step 1, where `start` is the start of your candle.\n\nThen, stop when you see a trade past your candle's `end` timestamp, discard trades past\n`end` and perform your aggregation.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/exchange"
          },
          {
            "$ref": "#/components/parameters/market"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of trades returned",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 2500,
              "default": 100
            },
            "example": 100
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sort order of returned trades and the direction from `from`.\n",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "example": "asc"
          },
          {
            "name": "from",
            "in": "query",
            "description": "Timestamp from which results should start in RFC3339. Please ensure you URI encode the timestamp. From is inclusive.\n",
            "schema": {
              "type": "string"
            },
            "example": "1970-01-01T00%3A00%3A00Z"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "List of trades",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Trade"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "1,12/01/2014 05:33:56,300.00000000,0.01000000"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/orders/snapshot": {
      "get": {
        "tags": [
          "Orders*"
        ],
        "summary": "Order Book Snapshot",
        "operationId": "getOrderBookSnapshot",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/orders/snapshot?key=your-key-here&exchange=binance&market=BTCUSDT&at=2019-04-01T12%3A00%3A00Z\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/orders/snapshot?key=your-key-here&exchange=binance&market=BTCUSDT&at=2019-04-01T12%3A00%3A00Z\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/orders/snapshot?key=your-key-here&exchange=binance&market=BTCUSDT&at=2019-04-01T12%3A00%3A00Z\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/orders/snapshot?key=your-key-here&exchange=binance&market=BTCUSDT&at=2019-04-01T12%3A00%3A00Z\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/orders/snapshot?key=your-key-here&exchange=binance&market=BTCUSDT&at=2019-04-01T12%3A00%3A00Z\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.\n\nThe most recent order book snapshot for the given exchange and\nmarket.  An empty result is returned if no snapshot is found\nwithin 24 hours prior to the provided timestamp.\n\nCSV format is: `timestamp,bidPrice,bidAmount,askPrice,askAmount`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/exchange"
          },
          {
            "$ref": "#/components/parameters/market"
          },
          {
            "at": null,
            "name": "at",
            "in": "query",
            "description": "The newest order book *before* this timestamp will be returned. Timestamp should be in RFC3339 (URI escaped).",
            "schema": {
              "type": "string"
            },
            "example": "2019-04-01T12%3A00%3A00Z"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "Order book snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "timestamp": {
                      "type": "string",
                      "description": "RFC3339 timestamp of the order book snapshot",
                      "example": "2018-05-14T00:04:31Z"
                    },
                    "bids": {
                      "description": "Tuples of bids in descending order (first entry is best bid). First entry is price in the quote currency. Second entry is volume of the base currency.",
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "double"
                        }
                      },
                      "example": [
                        [
                          7017.98,
                          0.18376
                        ],
                        [
                          7017.97,
                          0.094285
                        ],
                        [
                          7017.95,
                          2
                        ],
                        [
                          7017.87,
                          0.214651
                        ],
                        [
                          7017.38,
                          2
                        ]
                      ]
                    },
                    "asks": {
                      "description": "Tuples of asks in ascending order (first entry is best ask). First entry is price in the quote currency. Second entry is volume of the base currency.",
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "double"
                        }
                      },
                      "example": [
                        [
                          7020,
                          4.77738
                        ],
                        [
                          7020.03,
                          0.864663
                        ],
                        [
                          7020.26,
                          2.856361
                        ],
                        [
                          7020.27,
                          0.031258
                        ],
                        [
                          7021,
                          3.076297
                        ]
                      ]
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "08/29/2018 20:14:04,7014.31,0.178164,7015.99,0.000044"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/orders/batches": {
      "get": {
        "tags": [
          "Orders*"
        ],
        "summary": "Order Book Batches",
        "operationId": "getOrderBookBatches",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/orders/batches?key=your-key-here&exchange=binance&market=BTCUSDT&date=2021-03-15\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/orders/batches?key=your-key-here&exchange=binance&market=BTCUSDT&date=2021-03-15\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/orders/batches?key=your-key-here&exchange=binance&market=BTCUSDT&date=2021-03-15\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/orders/batches?key=your-key-here&exchange=binance&market=BTCUSDT&date=2021-03-15\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/orders/batches?key=your-key-here&exchange=binance&market=BTCUSDT&date=2021-03-15\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.\n\nThis endpoint returns daily batches of order book snapshots as\nZip archived CSV files.  Batches are available up to 2 days\nprior to the current date, inclusive.\n\nThis endpoint responds with an HTTP redirect to the desired\narchive file.  Because of this, you must take care to ensure that\nyour API client properly follows redirects.\n\nThe Zip file contains a single CSV file, named `books.csv`,\ncontaining the order book snapshots for each day.\n\nCSV format is: `time of day,kind (bid or ask),amount,price`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/exchange"
          },
          {
            "$ref": "#/components/parameters/market"
          },
          {
            "date": null,
            "name": "date",
            "in": "query",
            "description": "The date for which to export a batch.  Must be a date\nending at most 2 days prior to the current date.\n",
            "schema": {
              "type": "string"
            },
            "example": "2021-03-15"
          }
        ],
        "responses": {
          "200": {
            "description": "Order book batch",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "00:00:00.129,bid,57794.270000,1.424075\n00:00:00.129,bid,57794.260000,0.024794\n00:00:00.129,bid,57794.250000,1.565000\n00:00:00.129,bid,57789.690000,0.009109\n00:00:00.129,ask,57794.280000,0.035800\n00:00:00.129,ask,57794.990000,0.012111\n00:00:00.129,ask,57798.930000,0.003371\n00:00:00.129,ask,57798.940000,0.001379\n"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/exchange_candles": {
      "get": {
        "tags": [
          "Candles*"
        ],
        "summary": "Exchange OHLCV Candles",
        "operationId": "getExchangeCandles",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/exchange_candles?key=your-key-here&interval=1d&exchange=binance&market=BTCUSDT&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/exchange_candles?key=your-key-here&interval=1d&exchange=binance&market=BTCUSDT&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/exchange_candles?key=your-key-here&interval=1d&exchange=binance&market=BTCUSDT&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/exchange_candles?key=your-key-here&interval=1d&exchange=binance&market=BTCUSDT&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/exchange_candles?key=your-key-here&interval=1d&exchange=binance&market=BTCUSDT&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.\n\nThe exchange candles endpoint returns raw open, close, high, low, and volume information for Nomics Markets.\nThe data is not aggregated, therefore prices are in the quote currency of the market and volume is in the base\ncurrency of the market.\n\nHistory is available for all candle sizes from inception, but\nthere are limits on the length of the date range you can\nrequest at a time:\n\n| interval | limit per request |\n|----------|-------------------|\n| `1d`     | no limit          |\n| `4h`     | 120 days          |\n| `1h`     | 30 days           |\n| `30m`    | 14 days           |\n| `5m`     | 3 days            |\n| `1m`     | 1 day             |\n\nIf the difference between your `end` and `start` parameters\nfor the `interval` you're requesting exceeds the limit, then\nyou'll receive an error.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/exchange-candle-interval"
          },
          {
            "$ref": "#/components/parameters/exchange"
          },
          {
            "$ref": "#/components/parameters/market"
          },
          {
            "interval-start": null,
            "name": "start",
            "in": "query",
            "description": "Start time of the interval in RFC3339 (URI escaped).  If\nnot provided, then candles will be returned starting from\nthe current time minus the date range limit for the\nrequested interval.  For example, if you request hourly\ncandles without specifying a start time, then candles\nspanning the last 30 days will be returned.\n",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "2018-04-14T00%3A00%3A00Z"
          },
          {
            "$ref": "#/components/parameters/interval-end"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of candles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "string",
                        "description": "Start time of the candle in RFC3339"
                      },
                      "low": {
                        "type": "string",
                        "description": "Lowest price in quote currency"
                      },
                      "open": {
                        "type": "string",
                        "description": "First trade price in quote currency"
                      },
                      "close": {
                        "type": "string",
                        "description": "Last trade price in quote currency"
                      },
                      "high": {
                        "type": "string",
                        "description": "Highest price in quote currency"
                      },
                      "volume": {
                        "type": "string",
                        "description": "Volume in base currency"
                      },
                      "num_trades": {
                        "type": "string",
                        "description": "Number of trades"
                      },
                      "price_outlier": {
                        "type": "boolean",
                        "description": "True when the candle is a price outlier.  May be null if outlier detection has not been applied to the candle."
                      },
                      "volume_outlier": {
                        "type": "boolean",
                        "description": "True when the candle is a volume outlier.  May be null if outlier detection has not been applied to the candle."
                      }
                    },
                    "example": {
                      "timestamp": "2018-04-14T00:00:00Z",
                      "low": "7810.00000000",
                      "open": "7877.48000000",
                      "close": "7999.01000000",
                      "high": "8186.00000000",
                      "volume": "31621.28635700",
                      "num_trades": "168756",
                      "price_outlier": null,
                      "volume_outlier": null
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "04/14/2018 00:00:00,7810.00000000,7877.48000000,7999.01000000,8186.00000000,31621.28635700,168756"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/markets/candles": {
      "get": {
        "tags": [
          "Candles*"
        ],
        "summary": "Aggregated Pair OHLCV Candles",
        "operationId": "getMarketCandles",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/markets/candles?key=your-key-here&interval=1d&base=ETH&quote=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/markets/candles?key=your-key-here&interval=1d&base=ETH&quote=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/markets/candles?key=your-key-here&interval=1d&base=ETH&quote=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/markets/candles?key=your-key-here&interval=1d&base=ETH&quote=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/markets/candles?key=your-key-here&interval=1d&base=ETH&quote=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.\n\nThe Aggregated Pair Candles endpoint returns aggregated open, close, high, low, and volume information for an\nAggregated Pair of base and quote currencies. Open and Close are volume weighted averages across markets, while\nHigh and Low are the max and min prices across markets. Volume is the total volume.\n\nThis is equivalent to getting Exchange Market OHLCV Candles across all exchanges with the given base and quote\nand merging them together. This is different from Aggregated OHLCV Candles because those convert to USD and\nmerge candles across the base currency only.\n\nThe data is aggregated but not converted to USD, so OHLC values are in the quote currency unit and Volume\nis in the base currency unit.\n\nHistory is available for all candle sizes from inception, but\nthere are limits on the length of the date range you can\nrequest at a time:\n\n| interval | limit    |\n|----------|----------|\n| `1d`     | no limit |\n| `4h`     | 120 days |\n| `1h`     | 30 days  |\n| `30m`    | 14 days  |\n| `5m`     | 3 days   |\n| `1m`     | 1 day    |\n\nIf the difference between your `end` and `start` parameters\nfor the `interval` you're requesting exceeds the limit, then\nyou'll receive an error.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/exchange-candle-interval"
          },
          {
            "name": "base",
            "in": "query",
            "required": true,
            "description": "Base currency of the pair",
            "schema": {
              "type": "string"
            },
            "example": "ETH"
          },
          {
            "name": "quote",
            "in": "query",
            "required": true,
            "description": "Quote currency of the pair",
            "schema": {
              "type": "string"
            },
            "example": "BTC"
          },
          {
            "interval-start": null,
            "name": "start",
            "in": "query",
            "description": "Start time of the interval in RFC3339 (URI escaped).  If\nnot provided, then candles will be returned starting from\nthe current time minus the date range limit for the\nrequested interval.  For example, if you request hourly\ncandles without specifying a start time, then candles\nspanning the last 30 days will be returned.\n",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "2018-04-14T00%3A00%3A00Z"
          },
          {
            "$ref": "#/components/parameters/interval-end"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of candles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "string",
                        "description": "Start time of the candle in RFC3339"
                      },
                      "low": {
                        "type": "string",
                        "description": "Lowest price in quote currency"
                      },
                      "open": {
                        "type": "string",
                        "description": "Volume weighted average of first trade prices in quote currency"
                      },
                      "close": {
                        "type": "string",
                        "description": "Volume weighted average of last trade prices in quote currency"
                      },
                      "high": {
                        "type": "string",
                        "description": "Highest price in quote currency"
                      },
                      "volume": {
                        "type": "string",
                        "description": "Volume in base currency"
                      },
                      "num_trades": {
                        "type": "string",
                        "description": "Total number of trades across all markets"
                      },
                      "price_outlier": {
                        "type": "boolean",
                        "description": "True when the candle is a price outlier.  May be null if outlier detection has not been applied to the candle."
                      },
                      "volume_outlier": {
                        "type": "boolean",
                        "description": "True when the candle is a volume outlier.  May be null if outlier detection has not been applied to the candle."
                      }
                    },
                    "example": {
                      "timestamp": "2018-04-14T00:00:00Z",
                      "low": "0.06101",
                      "open": "0.06267940",
                      "close": "0.06282333",
                      "high": "0.066667",
                      "volume": "193325.66033455",
                      "num_trades": "185948",
                      "price_outlier": null,
                      "volume_outlier": null
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "04/14/2018 00:00:00,0.06101,0.06267940,0.06282333,0.066667,193325.66033455,185948"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/currencies/predictions/ticker": {
      "get": {
        "tags": [
          "Predictions*"
        ],
        "summary": "Currency Predictions Ticker",
        "operationId": "getCurrenciesPredictionsTicker",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/currencies/predictions/ticker?key=your-key-here&ids=BTC,ETH\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/currencies/predictions/ticker?key=your-key-here&ids=BTC,ETH\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/currencies/predictions/ticker?key=your-key-here&ids=BTC,ETH\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/currencies/predictions/ticker?key=your-key-here&ids=BTC,ETH\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/currencies/predictions/ticker?key=your-key-here&ids=BTC,ETH\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.\n\nThe Currencies Predictions Ticker endpoint returns the current price prediction for all currencies.\n[Read more about Nomics Price Predictions](https://blog.nomics.com/announcements/crypto-bitcoin-price-prediction/).\n",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Comma separated list of Nomics currency IDs",
            "schema": {
              "type": "string"
            },
            "example": "BTC,ETH"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of currency prediction tickers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Currency ID"
                      },
                      "predictions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "avg_error_pct": {
                              "type": "string",
                              "description": "Historical mean error percentage"
                            },
                            "avg_error_pct_30d": {
                              "type": "string",
                              "description": "30 day mean error percentage"
                            },
                            "avg_error_pct_7d": {
                              "type": "string",
                              "description": "7 day mean error percentage"
                            },
                            "interval": {
                              "type": "string",
                              "description": "Prediction size as Nomics interval"
                            },
                            "price_change_pct": {
                              "type": "string",
                              "description": "Predicted price change percent"
                            },
                            "price_end": {
                              "type": "string",
                              "description": "Predicted price at the end of the interval (USD)"
                            },
                            "price_start": {
                              "type": "string",
                              "description": "Price when the prediction was made (USD)"
                            },
                            "timestamp_end": {
                              "type": "string",
                              "description": "Timestamp at the end of the interval"
                            },
                            "timestamp_start": {
                              "type": "string",
                              "description": "Timestamp when the prediction was made"
                            }
                          }
                        }
                      }
                    }
                  },
                  "example": [
                    {
                      "id": "BTC",
                      "predictions": [
                        {
                          "avg_error_pct": "0.0287",
                          "avg_error_pct_30d": "0.0768",
                          "avg_error_pct_7d": "0.0720",
                          "interval": "7d",
                          "price_change_pct": "-0.028",
                          "price_end": "6940.17363192",
                          "price_start": "7139.92807691",
                          "timestamp_end": "2020-04-29T00:00:00Z",
                          "timestamp_start": "2020-04-23T00:00:00Z"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/currencies/predictions/history": {
      "get": {
        "tags": [
          "Predictions*"
        ],
        "summary": "Currency Predictions History",
        "operationId": "getCurrenciesPredictionsHistory",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/currencies/predictions/history?key=your-key-here&id=BTC&interval=7d\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/currencies/predictions/history?key=your-key-here&id=BTC&interval=7d\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/currencies/predictions/history?key=your-key-here&id=BTC&interval=7d\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/currencies/predictions/history?key=your-key-here&id=BTC&interval=7d\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/currencies/predictions/history?key=your-key-here&id=BTC&interval=7d\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.\n\nThe Currencies Predictions History endpoint returns historical price prediction for one currency.\n[Read more about Nomics Price Predictions](https://blog.nomics.com/announcements/crypto-bitcoin-price-prediction/).\n",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Nomics currency ID",
            "schema": {
              "type": "string"
            },
            "example": "BTC"
          },
          {
            "name": "interval",
            "in": "query",
            "description": "Prediction interval",
            "schema": {
              "type": "string",
              "enum": [
                "7d"
              ]
            },
            "example": "7d"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of currency predictions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Currency ID"
                    },
                    "interval": {
                      "type": "string",
                      "description": "Prediction interval"
                    },
                    "predictions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "price_change_pct": {
                            "type": "string",
                            "description": "Predicted price change percent"
                          },
                          "price_end": {
                            "type": "string",
                            "description": "Predicted price at the end of the interval (USD)"
                          },
                          "actual_price_end": {
                            "type": "string",
                            "description": "Actual price at the end of the interval (USD)"
                          },
                          "price_start": {
                            "type": "string",
                            "description": "Price when the prediction was made (USD)"
                          },
                          "timestamp_end": {
                            "type": "string",
                            "description": "Timestamp at the end of the interval"
                          },
                          "timestamp_start": {
                            "type": "string",
                            "description": "Timestamp when the prediction was made"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "id": "BTC",
                    "interval": "7d",
                    "predictions": [
                      {
                        "actual_price_end": "7.40000000",
                        "price_change_pct": "-0.1954",
                        "price_end": "8.04649976",
                        "price_start": "10.00000000",
                        "timestamp_end": "2011-09-05T00:00:00Z",
                        "timestamp_start": "2011-08-30T00:00:00Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/meta/usage": {
      "get": {
        "tags": [
          "Usage"
        ],
        "summary": "API Key Usage",
        "operationId": "getAPIKeyUsage",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/meta/usage?key=your-key-here\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/meta/usage?key=your-key-here\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/meta/usage?key=your-key-here\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/meta/usage?key=your-key-here\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/meta/usage?key=your-key-here\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "This endpoint returns historical API usage data for metered API keys.\n",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Start time in IS8601 format.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "End time in IS8601 format.  Must be at most 30 days past `start`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of api key usage data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "price_change_pct": {
                        "type": "string",
                        "description": "Predicted price change percent"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "timestamp": "2021-05-29T00:00:00Z",
                    "endpoint": "/v1/candles",
                    "requests": 100
                  },
                  {
                    "timestamp": "2021-05-29T00:00:00Z",
                    "endpoint": "/v1/currencies/ticker",
                    "requests": 500
                  },
                  {
                    "timestamp": "2021-05-29T01:00:00Z",
                    "endpoint": "/v1/candles",
                    "requests": 200
                  },
                  {
                    "timestamp": "2021-05-29T01:00:00Z",
                    "endpoint": "/v1/currencies/ticker",
                    "requests": 800
                  }
                ]
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/prices": {
      "get": {
        "deprecated": true,
        "tags": [
          "Deprecated"
        ],
        "summary": "Prices",
        "operationId": "getPrices",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/prices?key=your-key-here\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/prices?key=your-key-here\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/prices?key=your-key-here\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/prices?key=your-key-here\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/prices?key=your-key-here\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "The prices endpoint returns current prices for all currencies. Prices are updated every 10 seconds.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of currencies with their price",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Price"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "BTC,10000.00000"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/dashboard": {
      "get": {
        "deprecated": true,
        "tags": [
          "Deprecated"
        ],
        "summary": "Dashboard",
        "operationId": "getDashboard",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/dashboard?key=your-key-here\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/dashboard?key=your-key-here\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/dashboard?key=your-key-here\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/dashboard?key=your-key-here\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/dashboard?key=your-key-here\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "The dashboard endpoint is a high level view of the current state of the market. It contains a wide\nvariety of information and is updated every minute.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of currency summaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dashboard"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "BTC,7436.82313,1017039454.62165,1013499101.75834,7123.20591,7856259697.70049,7139283718.53940,10769.08245,41483988434.15605,50120582053.23234,1144.85801,385101925394.80138,16773015388.14144,6888.45685,24436.29525,2018-01-05T00:00:00Z,bithumb,KRW,16957550.0,21000000.0"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/currencies/interval": {
      "get": {
        "deprecated": true,
        "tags": [
          "Deprecated"
        ],
        "summary": "Currencies Interval",
        "operationId": "getCurrenciesInterval",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/currencies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/currencies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/currencies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/currencies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/currencies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "Open and close prices and volume for all currencies between a customizable time range.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/interval-start"
          },
          {
            "$ref": "#/components/parameters/interval-end"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "Open, close, and volume for all currencies in a time range",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "currency": {
                        "type": "string",
                        "description": "Nomics ID of the currency"
                      },
                      "volume": {
                        "type": "string",
                        "description": "Total volume in USD over the time range"
                      },
                      "open": {
                        "type": "string",
                        "description": "Open price in USD"
                      },
                      "open_timestamp": {
                        "type": "string",
                        "description": "RFC3999 timestamp of the open price"
                      },
                      "close": {
                        "type": "string",
                        "description": "Close price in USD"
                      },
                      "close_timestamp": {
                        "type": "string",
                        "description": "RFC3999 timestamp of the open price"
                      }
                    },
                    "example": {
                      "currency": "BTC",
                      "volume": "7039575495.41955",
                      "open": "8746.03472",
                      "open_timestamp": "2018-05-14T00:00:00Z",
                      "close": "7509.12469",
                      "close_timestamp": "2018-05-24T00:00:00Z"
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "BTC,7042240511.06433,8746.03472,05/14/2018 00:00:00,7498.07225,05/24/2018 00:00:00"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/currencies/highs": {
      "get": {
        "deprecated": true,
        "tags": [
          "Deprecated"
        ],
        "summary": "All Time Highs",
        "operationId": "getCurrencyHighs",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/currencies/highs?key=your-key-here\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/currencies/highs?key=your-key-here\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/currencies/highs?key=your-key-here\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/currencies/highs?key=your-key-here\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/currencies/highs?key=your-key-here\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "Returns all time high information for all currencies.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "All time highs for all currencies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "currency": {
                        "type": "string",
                        "description": "Nomics ID of the currency"
                      },
                      "price": {
                        "type": "string",
                        "description": "Highest price of the currency in USD"
                      },
                      "timestamp": {
                        "type": "string",
                        "description": "Timestamp of the high price in RFC3339"
                      },
                      "exchange": {
                        "type": "string",
                        "description": "Exchange ID on which the high occurred"
                      },
                      "quote": {
                        "type": "string",
                        "description": "Quote currency against which the high occurred"
                      }
                    },
                    "example": {
                      "currency": "BTC",
                      "price": "24436.29525",
                      "timestamp": "2018-01-05T00:00:00Z",
                      "exchange": "bithumb",
                      "quote": "KRW"
                    }
                  }
                }
              },
              "test/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "BTC,24436.29525,01/05/2018 00:00:00,bithumb,KRW"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/sparkline": {
      "get": {
        "tags": [
          "Deprecated"
        ],
        "summary": "Sparkline",
        "deprecated": true,
        "operationId": "getSparkline",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/sparkline?key=your-key-here\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/sparkline?key=your-key-here\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/sparkline?key=your-key-here\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/sparkline?key=your-key-here\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/sparkline?key=your-key-here\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "**Deprecated in favor of [Currencies Sparkline](#operation/getCurrenciesSparkline)**\n\nThe sparkline endpoint is a high level view of currency performance over a variety of intervals.\n",
        "responses": {
          "200": {
            "description": "Currency performance over time for all currencies over day, week, month, and year periods.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "day": {
                      "type": "array",
                      "description": "Currency performance over the past 24 hours",
                      "items": {
                        "$ref": "#/components/schemas/SparklineRow"
                      }
                    },
                    "week": {
                      "type": "array",
                      "description": "Currency performance over the past 7 days",
                      "items": {
                        "$ref": "#/components/schemas/SparklineRow"
                      }
                    },
                    "month": {
                      "type": "array",
                      "description": "Currency performance over the past 30 days",
                      "items": {
                        "$ref": "#/components/schemas/SparklineRow"
                      }
                    },
                    "year": {
                      "type": "array",
                      "description": "Currency performance over the past 365 days",
                      "items": {
                        "$ref": "#/components/schemas/SparklineRow"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/market-cap/sparkline": {
      "get": {
        "deprecated": true,
        "tags": [
          "Deprecated"
        ],
        "summary": "Market Cap Sparkline",
        "operationId": "getMarketCapSparkline",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/market-cap/sparkline?key=your-key-here\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/market-cap/sparkline?key=your-key-here\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/market-cap/sparkline?key=your-key-here\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/market-cap/sparkline?key=your-key-here\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/market-cap/sparkline?key=your-key-here\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "**Deprecated in favor of [Market Cap History](#operation/getMarketCapHistory)**\n\nThe Market Cap Sparkline is a high level history of the market cap for all assets.\n",
        "responses": {
          "200": {
            "description": "Performance over time for the entire market over day, week, month, and year periods.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "day": {
                      "type": "array",
                      "description": "Market performance over the past 24 hours",
                      "items": {
                        "$ref": "#/components/schemas/MarketCapSparklineRow"
                      }
                    },
                    "week": {
                      "type": "array",
                      "description": "Market performance over the past 7 days",
                      "items": {
                        "$ref": "#/components/schemas/MarketCapSparklineRow"
                      }
                    },
                    "month": {
                      "type": "array",
                      "description": "Market performance over the past 30 days",
                      "items": {
                        "$ref": "#/components/schemas/MarketCapSparklineRow"
                      }
                    },
                    "year": {
                      "type": "array",
                      "description": "Market performance over the past 365 days",
                      "items": {
                        "$ref": "#/components/schemas/MarketCapSparklineRow"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/exchange-rates/interval": {
      "get": {
        "deprecated": true,
        "tags": [
          "Deprecated"
        ],
        "summary": "Exchange Rates Interval",
        "operationId": "getExchangeRatesInterval",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl \"https://api.nomics.com/v1/exchange-rates/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\""
          },
          {
            "lang": "JavaScript",
            "source": "fetch(\"https://api.nomics.com/v1/exchange-rates/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => response.json())\n  .then(data => console.log(data))"
          },
          {
            "lang": "NodeJS",
            "source": "require('axios')\n  .get(\"https://api.nomics.com/v1/exchange-rates/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\n  .then(response => console.log(response))"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nuri = URI(\"https://api.nomics.com/v1/exchange-rates/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\")\nputs Net::HTTP.get(uri)"
          },
          {
            "lang": "Python",
            "source": "import urllib.request\nurl = \"https://api.nomics.com/v1/exchange-rates/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z\"\nprint(urllib.request.urlopen(url).read())"
          }
        ],
        "description": "Exchange rates to convert from USD over a time interval. This endpoint can be used with other interval endpoints\nto convert values into a desired quote currency.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/interval-start"
          },
          {
            "$ref": "#/components/parameters/interval-end"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "List of exchange rates open and close information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "currency": {
                        "type": "string",
                        "description": "Nomics ID of the currency"
                      },
                      "open": {
                        "type": "string",
                        "description": "Open rate of exchange"
                      },
                      "open_timestamp": {
                        "type": "string",
                        "description": "RFC3999 timestamp of the open rate"
                      },
                      "close": {
                        "type": "string",
                        "description": "Close rate of exchange"
                      },
                      "close_timestamp": {
                        "type": "string",
                        "description": "RFC3999 timestamp of the open rate"
                      }
                    },
                    "example": {
                      "currency": "EUR",
                      "open": "1.1934028689404969",
                      "open_timestamp": "2018-05-14T00:00:00Z",
                      "close": "1.1707956727391936",
                      "close_timestamp": "2018-05-24T00:00:00Z"
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "EUR,1.1934028689404969,05/14/2018 00:00:00,1.1707956727391936,05/24/2018 00:00:00"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Key": {
        "type": "apiKey",
        "in": "query",
        "name": "key",
        "description": "**You must include your API Key as a query parameter in every request you make.**\n\nFor example:\n\nhttps://api.nomics.com/v1/markets?key=your-key-here\n\n[Get your Nomics API key here](https://p.nomics.com/cryptocurrency-bitcoin-api/)\n"
      }
    },
    "schemas": {
      "MarketInterval": {
        "type": "object",
        "properties": {
          "exchange": {
            "type": "string",
            "description": "Nomics Exchange ID"
          },
          "quote": {
            "type": "string",
            "description": "Nomics Currency ID of the asset used to quote a price"
          },
          "volume": {
            "type": "string",
            "description": "Total volume in USD"
          },
          "open": {
            "type": "string",
            "description": "Open price in USD"
          },
          "open_timestamp": {
            "type": "string",
            "description": "Timestamp of the open price in RFC 3339"
          },
          "close": {
            "type": "string",
            "description": "Close price in USD"
          },
          "close_timestamp": {
            "type": "string",
            "description": "Timestamp of the close price in RFC 3339"
          }
        },
        "example": {
          "exchange": "bitfinex",
          "quote": "EUR",
          "volume": "4986395.59716",
          "open": "9484.34395",
          "open_timestamp": "2018-05-03T15:00:00Z",
          "close": "9671.60953",
          "close_timestamp": "2018-05-03T20:31:24.737Z"
        }
      },
      "Price": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency ID"
          },
          "price": {
            "type": "string",
            "description": "Price"
          }
        },
        "example": {
          "currency": "BTC",
          "price": "10000.00000"
        }
      },
      "Dashboard": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency ID"
          },
          "dayOpen": {
            "type": "string",
            "description": "Price one day ago"
          },
          "dayVolume": {
            "type": "string",
            "description": "Volume over the past day"
          },
          "dayOpenVolume": {
            "type": "string",
            "description": "Volume over the previous day"
          },
          "weekOpen": {
            "type": "string",
            "description": "Price one week ago"
          },
          "weekVolume": {
            "type": "string",
            "description": "Volume over the past week"
          },
          "weekOpenVolume": {
            "type": "string",
            "description": "Volume over the previous week"
          },
          "monthOpen": {
            "type": "string",
            "description": "Price one month ago"
          },
          "monthVolume": {
            "type": "string",
            "description": "Volume over the past 30 days"
          },
          "monthOpenVolume": {
            "type": "string",
            "description": "Volume over the previous 30 days"
          },
          "yearOpen": {
            "type": "string",
            "description": "Price one year ago"
          },
          "yearVolume": {
            "type": "string",
            "description": "Volume over the past year"
          },
          "yearOpenVolume": {
            "type": "string",
            "description": "Volume over the previous year"
          },
          "close": {
            "type": "string",
            "description": "Current price"
          },
          "high": {
            "type": "string",
            "description": "Highest price"
          },
          "highTimestamp": {
            "type": "string",
            "description": "Timestamp of the highest price in RFC3339"
          },
          "highExchange": {
            "type": "string",
            "description": "Exchange on which the highest price occurred"
          },
          "highQuoteCurrency": {
            "type": "string",
            "description": "Quote currency against which highest price was recorded"
          },
          "availableSupply": {
            "type": "string",
            "description": "Circulating supply"
          },
          "maxSupply": {
            "type": "string",
            "description": "Maximum supply"
          }
        },
        "example": {
          "currency": "BTC",
          "dayOpen": "7436.82313",
          "dayVolume": "1017039454.62165",
          "dayOpenVolume": "1013499101.75834",
          "weekOpen": "7123.20591",
          "weekVolume": "7856259697.70049",
          "weekOpenVolume": "7139283718.53940",
          "monthOpen": "10769.08245",
          "monthVolume": "41483988434.15605",
          "monthOpenVolume": "50120582053.23234",
          "yearOpen": "1144.85801",
          "yearVolume": "385101925394.80138",
          "yearOpenVolume": "16773015388.14144",
          "close": "6888.45685",
          "high": "24436.29525",
          "highTimestamp": "2018-01-05T00:00:00Z",
          "highExchange": "bithumb",
          "highQuoteCurrency": "KRW",
          "availableSupply": "16957550.0",
          "maxSupply": "21000000.0"
        }
      },
      "SparklineRow": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency ID",
            "example": "BTC"
          },
          "timestamps": {
            "type": "array",
            "description": "Time values matching the close values",
            "items": {
              "type": "string",
              "description": "Timestamp of the start of the candle in RFC3339",
              "example": "2018-04-03T16:00:00Z"
            }
          },
          "closes": {
            "type": "array",
            "description": "Closing price in USD corresponding to timestamp value",
            "items": {
              "type": "string",
              "description": "Price in USD",
              "example": "7436.82313"
            }
          }
        }
      },
      "MarketCapSparklineRow": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency ID",
            "example": "MarketCap"
          },
          "timestamps": {
            "type": "array",
            "description": "Time values matching the close values",
            "items": {
              "type": "string",
              "description": "Timestamp of the start of the candle in RFC3339",
              "example": "2018-04-03T16:00:00Z"
            }
          },
          "closes": {
            "type": "array",
            "description": "Closing market cap in USD corresponding to timestamp value",
            "items": {
              "type": "string",
              "description": "Market Cap in USD",
              "example": "7436.82313"
            }
          }
        }
      },
      "ExchangeRate": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency ID",
            "example": "AUD"
          },
          "rate": {
            "type": "string",
            "description": "Exchange rate to USD (Currency * Rate = USD)",
            "example": "0.76953"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp this rate was updated at in RFC3339",
            "example": "2018-04-04T00:00:00Z"
          }
        }
      },
      "Trade": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Exchange's ID of the trade (or synthetic ID when not available)",
            "example": "3608432558"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp in RFC3339",
            "example": "2014-12-01T05:33:56.761199Z"
          },
          "price": {
            "type": "string",
            "description": "Price of the trade in the quote currency of the market",
            "example": "9271.73"
          },
          "volume": {
            "type": "string",
            "description": "Volume of the trade in the base currency of the market",
            "example": "0.02122885"
          }
        }
      },
      "GlobalTickerInterval": {
        "type": "object",
        "properties": {
          "market_cap_change": {
            "type": "string",
            "description": "Amount of market cap change for the given interval",
            "example": "12684321666"
          },
          "market_cap_change_pct": {
            "type": "string",
            "description": "Percent change of market cap for the given interval",
            "example": "0.0071"
          },
          "transparent_market_cap_change": {
            "type": "string",
            "description": "Amount of transparent market cap change for the given interval",
            "example": "9913761626"
          },
          "transparent_market_cap_change_pct": {
            "type": "string",
            "description": "Percent change of transparent market cap for the given interval",
            "example": "0.0057"
          },
          "volume": {
            "type": "string",
            "description": "Total volume (spot + derivative volume) for the given interval",
            "example": "261184503290.13"
          },
          "volume_change": {
            "type": "string",
            "description": "Amount of volume change for the given interval",
            "example": "-36297038690.90"
          },
          "volume_change_pct": {
            "type": "string",
            "description": "Percent change of volume for the given interval",
            "example": "-0.1220"
          },
          "spot_volume": {
            "type": "string",
            "description": "Total spot market volume for the given interval",
            "example": "183847018626.59"
          },
          "spot_volume_change": {
            "type": "string",
            "description": "Amount of spot volume change for the given interval",
            "example": "-21057431830.52"
          },
          "spot_volume_change_pct": {
            "type": "string",
            "description": "Percent change of spot volume for the given interval",
            "example": "-0.1028"
          },
          "derivative_volume": {
            "type": "string",
            "description": "Total derivative market volume for the given interval",
            "example": "77337484663.54"
          },
          "derivative_volume_change": {
            "type": "string",
            "description": "Amount of derivative volume change for the given interval",
            "example": "-15239606860.37"
          },
          "derivative_volume_change_pct": {
            "type": "string",
            "description": "Percent change of derivative volume for the given interval",
            "example": "-0.1646"
          },
          "transparent_volume": {
            "type": "string",
            "description": "Total transparent volume for the given interval",
            "example": "83650606519.52"
          },
          "transparent_volume_change": {
            "type": "string",
            "description": "Amount of transparent volume change for the given interval",
            "example": "-13318816933.73"
          },
          "transparent_volume_change_pct": {
            "type": "string",
            "description": "Percent change of transparent volume for the given interval",
            "example": "-0.1374"
          },
          "transparent_spot_volume": {
            "type": "string",
            "description": "Total transparent spot market volume for the given interval",
            "example": "35168278207.40"
          },
          "transparent_spot_volume_change": {
            "type": "string",
            "description": "Amount of transparent spot market volume change for the given interval",
            "example": "-4606944979.20"
          },
          "transparent_spot_volume_change_pct": {
            "type": "string",
            "description": "Percent change of transparent spot market volume for the given interval",
            "example": "-0.1158"
          },
          "transparent_derivative_volume": {
            "type": "string",
            "description": "Total transparent derivative market volume for the given interval",
            "example": "48482328312.12"
          },
          "transparent_derivative_volume_change": {
            "type": "string",
            "description": "Amount of transparent derivative market volume change for the given interval",
            "example": "-8711871954.54"
          },
          "transparent_derivative_volume_change_pct": {
            "type": "string",
            "description": "Percent change of transparent derivative market volume for the given interval",
            "example": "-0.1523"
          },
          "volume_transparency": {
            "type": "array",
            "description": "An array of `volume`, `volume_change` and `volume_change_pct` by exchange grade for the given interval",
            "example": [
              {
                "grade": "A",
                "volume": "83650606519.52",
                "volume_change": "-13318816933.73",
                "volume_change_pct": "-0.1374"
              },
              {
                "grade": "B",
                "volume": "466859661.78",
                "volume_change": "-104098455.53",
                "volume_change_pct": "-0.1823"
              }
            ]
          }
        }
      }
    },
    "parameters": {
      "format": {
        "name": "format",
        "in": "query",
        "description": "Format of the response. Defaults to JSON when blank.",
        "schema": {
          "type": "string",
          "enum": [
            "csv"
          ]
        }
      },
      "candle-interval": {
        "name": "interval",
        "in": "query",
        "description": "Time interval of the candle",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "1d",
            "1h"
          ]
        },
        "example": "1d"
      },
      "convert": {
        "name": "convert",
        "in": "query",
        "description": "Currency to quote ticker price, market cap, and volume values. May be a Fiat Currency or Cryptocurrency. Default is `USD`.",
        "required": false,
        "schema": {
          "type": "string",
          "example": "EUR"
        }
      },
      "exchange-candle-interval": {
        "name": "interval",
        "in": "query",
        "description": "Time interval of the candle",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "1d",
            "4h",
            "1h",
            "30m",
            "5m",
            "1m"
          ]
        },
        "example": "1d"
      },
      "currency": {
        "name": "currency",
        "in": "query",
        "description": "Currency ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "BTC"
      },
      "exchange": {
        "name": "exchange",
        "in": "query",
        "description": "Exchange ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "binance"
      },
      "market": {
        "name": "market",
        "in": "query",
        "description": "The Exchange's Market ID from [Markets](#tag/Markets)",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "BTCUSDT"
      },
      "interval-start": {
        "name": "start",
        "in": "query",
        "description": "Start time of the interval in RFC3339 (URI escaped)",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "2018-04-14T00%3A00%3A00Z"
      },
      "interval-end": {
        "name": "end",
        "in": "query",
        "description": "End time of the interval in RFC3339 (URI escaped). If not provided,\nthe current time is used.\n",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "2018-05-14T00%3A00%3A00Z"
      },
      "currency-ids": {
        "name": "ids",
        "in": "query",
        "description": "Comma separated list of Nomics Currency IDs to filter result rows\n",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "BTC,ETH,XRP"
      },
      "currency-attributes": {
        "name": "attributes",
        "in": "query",
        "description": "Comma separated list of currency attributes to filter result columns\n",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "id,name,logo_url"
      },
      "exchange-ids": {
        "name": "ids",
        "in": "query",
        "description": "Comma separated list of Nomics Exchange IDs to filter result rows\n",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "binance,idex,bittrex"
      },
      "exchange-attributes": {
        "name": "attributes",
        "in": "query",
        "description": "Comma separated list of exchange attributes to filter result columns\n",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "id,name,transparency_grade"
      },
      "exchange-centralized": {
        "name": "centralized",
        "in": "query",
        "description": "When `true`, selects centralized exchanges.  When `false`,\nremoves centralized exchanges.  If omitted, all exchange types\nare shown.  May be used in conjunction with `decentralized` to\nform an \"and\" filter.\n",
        "schema": {
          "type": "string",
          "enum": [
            true,
            false
          ]
        }
      },
      "exchange-decentralized": {
        "name": "decentralized",
        "in": "query",
        "description": "When `true`, selects decentralized exchanges.  When `false`,\nremoves decentralized exchanges.  If omitted, all exchange\ntypes are shown.  May be used in conjunction with\n`centralized` to form an \"and\" filter.\n",
        "schema": {
          "type": "string",
          "enum": [
            true,
            false
          ]
        }
      },
      "include-transparency": {
        "name": "include-transparency",
        "in": "query",
        "description": "Whether to include [Transparent Volume](https://blog.nomics.com/essays/transparent-volume/) and transparent market cap information in the response. Default is `false`. This option is only available to customers of our paid API plans.\n",
        "required": false,
        "schema": {
          "type": "boolean"
        },
        "example": false
      },
      "per-page": {
        "name": "per-page",
        "in": "query",
        "description": "The maximum number of items to return per paginated response.\nPaginated responses include an additional response header,\n`X-Pagination-Total-Items`, which represents the total number\nof items available after all the request filters have been\napplied.  Must be between `1` and `100` (inclusive).\n",
        "required": false,
        "schema": {
          "type": "integer",
          "min": 1,
          "max": 100,
          "default": 100
        },
        "example": 100
      },
      "page": {
        "name": "page",
        "in": "query",
        "description": "Which page of items to get.\n",
        "required": false,
        "schema": {
          "type": "integer",
          "min": 1
        },
        "example": 1
      },
      "single-interval": {
        "name": "interval",
        "in": "query",
        "description": "Time interval.  Defaults to `1d`.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "1h",
            "1d",
            "7d",
            "30d",
            "365d",
            "ytd"
          ]
        }
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Authentication information is missing or invalid"
      }
    }
  },
  "security": [
    {
      "Key": []
    }
  ]
}
